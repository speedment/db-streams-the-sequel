package com.company.sakila.sakila.sakila.film.generated;

import com.company.sakila.sakila.sakila.film.Film;
import com.company.sakila.sakila.sakila.film.FilmImpl;
import com.company.sakila.sakila.sakila.film.generated.GeneratedFilm.Rating;
import com.company.sakila.sakila.sakila.language.Language;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.function.BiLongToIntFunction;
import com.speedment.common.function.LongToBooleanFunction;
import com.speedment.common.function.LongToByteFunction;
import com.speedment.common.function.LongToCharFunction;
import com.speedment.common.function.LongToFloatFunction;
import com.speedment.common.function.LongToShortFunction;
import com.speedment.enterprise.common.bytebuffercommon.ByteBufferUtil;
import com.speedment.enterprise.datastore.runtime.DataStoreHolder;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreSerializer;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStoreComparator;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStoreCompareTo;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStorePredicate;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.datastore.runtime.internal.throwable.Utf8Exception;
import com.speedment.enterprise.datastore.runtime.throwable.DeserializationException;
import com.speedment.enterprise.datastore.runtime.util.BigDecimalUtil;
import com.speedment.enterprise.datastore.runtime.util.SerializerUtil;
import com.speedment.enterprise.datastore.runtime.util.Utf8Util;
import com.speedment.runtime.config.identifier.ColumnIdentifier;

import java.math.BigDecimal;
import java.nio.ByteBuffer;
import java.sql.Date;
import java.sql.Timestamp;
import java.util.List;
import java.util.function.BiConsumer;
import java.util.function.LongConsumer;
import java.util.function.LongFunction;
import java.util.function.LongPredicate;
import java.util.function.LongToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongUnaryOperator;

import static java.util.Collections.singletonList;
import static java.util.Objects.requireNonNull;
import static java.util.stream.Collectors.joining;

/**
 * Serializes and deserializes instances of Film.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedFilmEntityStoreSerializerImpl implements EntityStoreSerializer<Film> {
    
    private final LongFunction<ByteBuffer> bufferFinder;
    private final LongToIntFunction offsetFinder;
    private final static int FIELD_RATING = 0;
    private final static int FIELD_LANGUAGE_ID = 1;
    private final static int FIELD_RENTAL_DURATION = 3;
    private final static int FIELD_FILM_ID = 5;
    private final static int FIELD_LAST_UPDATE = 9;
    private final static int FKREF_FK_FILM_LANGUAGE = 17;
    private final static int ENDPOS_ORIGINAL_LANGUAGE_ID = 25;
    private final static int ENDPOS_LENGTH = 26;
    private final static int FKREF_ENDPOS_FK_FILM_LANGUAGE_ORIGINAL = 27;
    private final static int ENDPOS_RELEASE_YEAR = 28;
    private final static int ENDPOS_TITLE = 29;
    private final static int ENDPOS_DESCRIPTION = 33;
    private final static int ENDPOS_SPECIAL_FEATURES = 37;
    private final static int ENDPOS_RENTAL_RATE = 41;
    private final static int ENDPOS_REPLACEMENT_COST = 45;
    private final static int VARSIZE_BEGINS = 49;
    private final static Rating[] CONSTANTS_RATING = {Rating.fromDatabase("G"), Rating.fromDatabase("NC-17"), Rating.fromDatabase("PG"), Rating.fromDatabase("PG-13"), Rating.fromDatabase("R")};
    
    protected GeneratedFilmEntityStoreSerializerImpl(final LongFunction<ByteBuffer> bufferFinder, final LongToIntFunction offsetFinder) {
        this.bufferFinder = requireNonNull(bufferFinder);
        this.offsetFinder = requireNonNull(offsetFinder);
    }
    
    @Override
    public BiConsumer<ByteBuffer, Film> serializer() {
        return (buffer, entity) -> {
            int varSizePos = 0;
            buffer.put(FIELD_RATING, entity.getRating().isPresent()
                ? (byte) entity.getRating().get().ordinal()
                : (byte) 0xff);
            buffer.putShort(FIELD_LANGUAGE_ID, entity.getLanguageId());
            buffer.putShort(FIELD_RENTAL_DURATION, entity.getRentalDuration());
            buffer.putInt(FIELD_FILM_ID, entity.getFilmId());
            buffer.putLong(FIELD_LAST_UPDATE, entity.getLastUpdate().getTime());
            buffer.putLong(FKREF_FK_FILM_LANGUAGE, -1L); // Will be set later on in the decorator()-method.
            if (entity.getOriginalLanguageId().isPresent()) {
                buffer.putShort(VARSIZE_BEGINS + varSizePos, entity.getOriginalLanguageId().get());
                varSizePos += Short.BYTES;
                buffer.put(ENDPOS_ORIGINAL_LANGUAGE_ID, (byte) varSizePos);
            } else {
                buffer.put(ENDPOS_ORIGINAL_LANGUAGE_ID, (byte) (0x80 | varSizePos));
            }
            if (entity.getLength().isPresent()) {
                buffer.putInt(VARSIZE_BEGINS + varSizePos, entity.getLength().getAsInt());
                varSizePos += Integer.BYTES;
                buffer.put(ENDPOS_LENGTH, (byte) varSizePos);
            } else {
                buffer.put(ENDPOS_LENGTH, (byte) (0x80 | varSizePos));
            }
            if (entity.getOriginalLanguageId().isPresent()) {
                // The actual reference is set later in the decorator()-method.
                varSizePos += Long.BYTES;
                buffer.put(FKREF_ENDPOS_FK_FILM_LANGUAGE_ORIGINAL, (byte) varSizePos);
            } else {
                buffer.put(FKREF_ENDPOS_FK_FILM_LANGUAGE_ORIGINAL, (byte) (0b10000000 | varSizePos));
            }
            if (entity.getReleaseYear().isPresent()) {
                buffer.putLong(VARSIZE_BEGINS + varSizePos, entity.getReleaseYear().get().getTime());
                varSizePos += Long.BYTES;
                buffer.put(ENDPOS_RELEASE_YEAR, (byte) varSizePos);
            } else {
                buffer.put(ENDPOS_RELEASE_YEAR, (byte) (0x80 | varSizePos));
            }
            varSizePos += ByteBufferUtil.putArrayAbsolute(buffer, VARSIZE_BEGINS + varSizePos, entity.getTitle().getBytes());
            buffer.putInt(ENDPOS_TITLE, varSizePos);
            if (entity.getDescription().isPresent()) {
                varSizePos += ByteBufferUtil.putArrayAbsolute(buffer, VARSIZE_BEGINS + varSizePos, entity.getDescription().get().getBytes());
                buffer.putInt(ENDPOS_DESCRIPTION, varSizePos);
            } else {
                buffer.putInt(ENDPOS_DESCRIPTION, (0x80000000 | varSizePos));
            }
            if (entity.getSpecialFeatures().isPresent()) {
                varSizePos += ByteBufferUtil.putArrayAbsolute(buffer, VARSIZE_BEGINS + varSizePos, entity.getSpecialFeatures().get().getBytes());
                buffer.putInt(ENDPOS_SPECIAL_FEATURES, varSizePos);
            } else {
                buffer.putInt(ENDPOS_SPECIAL_FEATURES, (0x80000000 | varSizePos));
            }
            varSizePos += BigDecimalUtil.serialize(
                entity.getRentalRate(),
                buffer,
                VARSIZE_BEGINS + varSizePos
            );
            buffer.putInt(ENDPOS_RENTAL_RATE, varSizePos);
            varSizePos += BigDecimalUtil.serialize(
                entity.getReplacementCost(),
                buffer,
                VARSIZE_BEGINS + varSizePos
            );
            buffer.putInt(ENDPOS_REPLACEMENT_COST, varSizePos);
            buffer.position(0);
            buffer.limit(VARSIZE_BEGINS + varSizePos);
        };
    }
    
    @Override
    public LongConsumer decorator(DataStoreHolder holder) {
        final FieldCache.OfShort language_languageIdFieldCache = holder.getFieldCache(Language.LANGUAGE_ID.identifier());
        final LongToShortFunction languageIdDeserializer = shortDeserializer(Film.LANGUAGE_ID.identifier());
        final LongPredicate originalLanguageIdIsPresent = isPresent(Film.ORIGINAL_LANGUAGE_ID.identifier());
        final LongToShortFunction originalLanguageIdDeserializer = shortDeserializer(Film.ORIGINAL_LANGUAGE_ID.identifier());
        final LongUnaryOperator fkFilmLanguageResolver = ref -> {
            final short value = languageIdDeserializer.applyAsShort(ref);
            return language_languageIdFieldCache.any(value);
        };
        final LongUnaryOperator fkFilmLanguageOriginalResolver = ref -> {
            if (originalLanguageIdIsPresent.test(ref)) {
                final short value = originalLanguageIdDeserializer.applyAsShort(ref);
                return language_languageIdFieldCache.any(value);
            } else {
                return -1;
            }
        };
        return ref -> {
            final ByteBuffer buffer = bufferFinder.apply(ref);
            final int rowOffset = offsetFinder.applyAsInt(ref);
            final int fkFilmLanguageOriginalEndPos = buffer.get(rowOffset + FKREF_ENDPOS_FK_FILM_LANGUAGE_ORIGINAL);
            buffer.putLong(rowOffset + FKREF_FK_FILM_LANGUAGE, fkFilmLanguageResolver.applyAsLong(ref));
            if (fkFilmLanguageOriginalEndPos >= 0) {
                buffer.putLong(rowOffset + VARSIZE_BEGINS + fkFilmLanguageOriginalEndPos - Long.BYTES, fkFilmLanguageOriginalResolver.applyAsLong(ref));
            }
        };
    }
    
    @Override
    public LongFunction<Film> deserializer() {
        return ref -> {
            final ByteBuffer buffer = bufferFinder.apply(ref);
            final int offset = offsetFinder.applyAsInt(ref);
            final Film entity = new FilmImpl();
            entity.setFilmId(buffer.getInt(offset + FIELD_FILM_ID));
            try {
                entity.setTitle(Utf8Util.deserialize(buffer,
                    offset + VARSIZE_BEGINS + (0x7f & buffer.get(offset + ENDPOS_TITLE - Byte.BYTES)),
                    offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_TITLE)
                ));
            } catch (final Utf8Exception ex) {
                final LongToIntFunction sizeOf = sizeOf();
                throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
            }
            if (buffer.getInt(offset + ENDPOS_DESCRIPTION) >= 0) {
                try {
                    entity.setDescription(Utf8Util.deserialize(buffer,
                        offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_DESCRIPTION - Integer.BYTES)),
                        offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_DESCRIPTION)
                    ));
                } catch (final Utf8Exception ex) {
                    final LongToIntFunction sizeOf = sizeOf();
                    throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                }
            }
            if (buffer.get(offset + ENDPOS_RELEASE_YEAR) >= 0) {
                entity.setReleaseYear(new Date(buffer.getLong(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_RELEASE_YEAR) - Long.BYTES)));
            }
            entity.setLanguageId(buffer.getShort(offset + FIELD_LANGUAGE_ID));
            if (buffer.get(offset + ENDPOS_ORIGINAL_LANGUAGE_ID) >= 0) {
                entity.setOriginalLanguageId(buffer.getShort(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_ORIGINAL_LANGUAGE_ID) - Short.BYTES));
            }
            entity.setRentalDuration(buffer.getShort(offset + FIELD_RENTAL_DURATION));
            entity.setRentalRate(BigDecimalUtil.deserializeBigDecimal(buffer,
                offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_RENTAL_RATE - Integer.BYTES)),
                offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_RENTAL_RATE)
            ));
            if (buffer.get(offset + ENDPOS_LENGTH) >= 0) {
                entity.setLength(buffer.getInt(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_LENGTH) - Integer.BYTES));
            }
            entity.setReplacementCost(BigDecimalUtil.deserializeBigDecimal(buffer,
                offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_REPLACEMENT_COST - Integer.BYTES)),
                offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_REPLACEMENT_COST)
            ));
            if (buffer.get(offset + FIELD_RATING) != (byte) 0xff) {
                entity.setRating(CONSTANTS_RATING[buffer.get(offset + FIELD_RATING)]);
            }
            if (buffer.getInt(offset + ENDPOS_SPECIAL_FEATURES) >= 0) {
                try {
                    entity.setSpecialFeatures(Utf8Util.deserialize(buffer,
                        offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_SPECIAL_FEATURES - Integer.BYTES)),
                        offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_SPECIAL_FEATURES)
                    ));
                } catch (final Utf8Exception ex) {
                    final LongToIntFunction sizeOf = sizeOf();
                    throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                }
            }
            entity.setLastUpdate(new Timestamp(buffer.getLong(offset + FIELD_LAST_UPDATE)));
            return entity;
        };
    }
    
    @Override
    public Class<?> deserializedType(final ColumnIdentifier<Film> colId) {
        if (colId instanceof Film.Identifier) {
            final Film.Identifier _id = (Film.Identifier) colId;
            switch (_id) {
                case RATING               : return Rating.class;
                case LANGUAGE_ID          : 
                case RENTAL_DURATION      : return short.class;
                case FILM_ID              : return int.class;
                case LAST_UPDATE          : return Timestamp.class;
                case ORIGINAL_LANGUAGE_ID : return short.class;
                case LENGTH               : return int.class;
                case RELEASE_YEAR         : return Date.class;
                case TITLE                : 
                case DESCRIPTION          : 
                case SPECIAL_FEATURES     : return String.class;
                case RENTAL_RATE          : 
                case REPLACEMENT_COST     : return BigDecimal.class;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "rating"               : return Rating.class;
                case "language_id"          : 
                case "rental_duration"      : return short.class;
                case "film_id"              : return int.class;
                case "last_update"          : return Timestamp.class;
                case "original_language_id" : return short.class;
                case "length"               : return int.class;
                case "release_year"         : return Date.class;
                case "title"                : 
                case "description"          : 
                case "special_features"     : return String.class;
                case "rental_rate"          : 
                case "replacement_cost"     : return BigDecimal.class;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public <FK_ENTITY> LongUnaryOperator finder(final ColumnIdentifier<Film> colId, final ColumnIdentifier<FK_ENTITY> fkColId) {
        return finder(singletonList(colId), singletonList(fkColId));
    }
    
    @Override
    public <FK_ENTITY> LongUnaryOperator finder(final List<ColumnIdentifier<Film>> cols, final List<ColumnIdentifier<FK_ENTITY>> fkCols) {
        final String fkName = SerializerUtil.uniqueFkName(cols, fkCols);
        switch (fkName) {
            case "{language_id}->language{language_id}": return finder("fk_film_language");
            case "{original_language_id}->language{language_id}": return finder("fk_film_language_original");
        }
        
        throw new IllegalArgumentException(
            fkName + " is not a valid foreign reference name."
        );
    }
    
    @Override
    public LongUnaryOperator finder(final String fkName) {
        switch (fkName) {
            case "fk_film_language": return ref -> bufferFinder.apply(ref).getLong(offsetFinder.applyAsInt(ref) + FKREF_FK_FILM_LANGUAGE);
            case "fk_film_language_original": return ref -> {
                final ByteBuffer buffer = bufferFinder.apply(ref);
                final int rowOffset = offsetFinder.applyAsInt(ref);
                final int endPos = buffer.get(rowOffset + FKREF_ENDPOS_FK_FILM_LANGUAGE_ORIGINAL);
                if (endPos < 0) return -1L; // No foreign reference found
                else return buffer.getLong(rowOffset + VARSIZE_BEGINS + endPos - 8);
            };
        }
        
        throw new IllegalArgumentException(
            "Could not find a foreign key " + fkName + " in table 'film'."
        );
    }
    
    @Override
    public LongPredicate isNull(final ColumnIdentifier<Film> colId) {
        if (colId instanceof Film.Identifier) {
            final Film.Identifier _id = (Film.Identifier) colId;
            switch (_id) {
                case RATING               : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + FIELD_RATING) == (byte) 0xff;
                case LANGUAGE_ID          : 
                case RENTAL_DURATION      : 
                case FILM_ID              : 
                case LAST_UPDATE          : return ALWAYS_FALSE;
                case ORIGINAL_LANGUAGE_ID : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_ORIGINAL_LANGUAGE_ID) < 0;
                case LENGTH               : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_LENGTH) < 0;
                case RELEASE_YEAR         : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_RELEASE_YEAR) < 0;
                case TITLE                : return ALWAYS_FALSE;
                case DESCRIPTION          : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_DESCRIPTION) < 0;
                case SPECIAL_FEATURES     : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_SPECIAL_FEATURES) < 0;
                case RENTAL_RATE          : 
                case REPLACEMENT_COST     : return ALWAYS_FALSE;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "rating"               : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + FIELD_RATING) == (byte) 0xff;
                case "language_id"          : 
                case "rental_duration"      : 
                case "film_id"              : 
                case "last_update"          : return ALWAYS_FALSE;
                case "original_language_id" : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_ORIGINAL_LANGUAGE_ID) < 0;
                case "length"               : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_LENGTH) < 0;
                case "release_year"         : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_RELEASE_YEAR) < 0;
                case "title"                : return ALWAYS_FALSE;
                case "description"          : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_DESCRIPTION) < 0;
                case "special_features"     : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_SPECIAL_FEATURES) < 0;
                case "rental_rate"          : 
                case "replacement_cost"     : return ALWAYS_FALSE;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongPredicate isPresent(final ColumnIdentifier<Film> colId) {
        if (colId instanceof Film.Identifier) {
            final Film.Identifier _id = (Film.Identifier) colId;
            switch (_id) {
                case RATING               : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + FIELD_RATING) != (byte) 0xff;
                case LANGUAGE_ID          : 
                case RENTAL_DURATION      : 
                case FILM_ID              : 
                case LAST_UPDATE          : return ALWAYS_TRUE;
                case ORIGINAL_LANGUAGE_ID : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_ORIGINAL_LANGUAGE_ID) >= 0;
                case LENGTH               : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_LENGTH) >= 0;
                case RELEASE_YEAR         : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_RELEASE_YEAR) >= 0;
                case TITLE                : return ALWAYS_TRUE;
                case DESCRIPTION          : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_DESCRIPTION) >= 0;
                case SPECIAL_FEATURES     : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_SPECIAL_FEATURES) >= 0;
                case RENTAL_RATE          : 
                case REPLACEMENT_COST     : return ALWAYS_TRUE;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "rating"               : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + FIELD_RATING) != (byte) 0xff;
                case "language_id"          : 
                case "rental_duration"      : 
                case "film_id"              : 
                case "last_update"          : return ALWAYS_TRUE;
                case "original_language_id" : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_ORIGINAL_LANGUAGE_ID) >= 0;
                case "length"               : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_LENGTH) >= 0;
                case "release_year"         : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_RELEASE_YEAR) >= 0;
                case "title"                : return ALWAYS_TRUE;
                case "description"          : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_DESCRIPTION) >= 0;
                case "special_features"     : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_SPECIAL_FEATURES) >= 0;
                case "rental_rate"          : 
                case "replacement_cost"     : return ALWAYS_TRUE;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToByteFunction byteDeserializer(final ColumnIdentifier<Film> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type byte.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToShortFunction shortDeserializer(final ColumnIdentifier<Film> colId) {
        if (colId instanceof Film.Identifier) {
            final Film.Identifier _id = (Film.Identifier) colId;
            switch (_id) {
                case LANGUAGE_ID          : return ref -> bufferFinder.apply(ref).getShort(offsetFinder.applyAsInt(ref) + FIELD_LANGUAGE_ID);
                case RENTAL_DURATION      : return ref -> bufferFinder.apply(ref).getShort(offsetFinder.applyAsInt(ref) + FIELD_RENTAL_DURATION);
                case ORIGINAL_LANGUAGE_ID : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.getShort(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_ORIGINAL_LANGUAGE_ID) - Short.BYTES);
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type short.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "language_id"          : return ref -> bufferFinder.apply(ref).getShort(offsetFinder.applyAsInt(ref) + FIELD_LANGUAGE_ID);
                case "rental_duration"      : return ref -> bufferFinder.apply(ref).getShort(offsetFinder.applyAsInt(ref) + FIELD_RENTAL_DURATION);
                case "original_language_id" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.getShort(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_ORIGINAL_LANGUAGE_ID) - Short.BYTES);
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type short.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction intDeserializer(final ColumnIdentifier<Film> colId) {
        if (colId instanceof Film.Identifier) {
            final Film.Identifier _id = (Film.Identifier) colId;
            switch (_id) {
                case FILM_ID : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_FILM_ID);
                case LENGTH  : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.getInt(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_LENGTH) - Integer.BYTES);
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type int.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "film_id" : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_FILM_ID);
                case "length"  : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.getInt(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_LENGTH) - Integer.BYTES);
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type int.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongUnaryOperator longDeserializer(final ColumnIdentifier<Film> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type long.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToFloatFunction floatDeserializer(final ColumnIdentifier<Film> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type float.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToDoubleFunction doubleDeserializer(final ColumnIdentifier<Film> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type double.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToCharFunction charDeserializer(final ColumnIdentifier<Film> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type char.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToBooleanFunction booleanDeserializer(final ColumnIdentifier<Film> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type boolean.", colId.getColumnId())
        );
    }
    
    @Override
    public LongFunction<?> objectDeserializer(final ColumnIdentifier<Film> colId) {
        if (colId instanceof Film.Identifier) {
            final Film.Identifier _id = (Film.Identifier) colId;
            switch (_id) {
                case RATING           : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return CONSTANTS_RATING[buffer.get(offset + FIELD_RATING)];
                };
                case LAST_UPDATE      : return ref -> new Timestamp(bufferFinder.apply(ref).getLong(offsetFinder.applyAsInt(ref) + FIELD_LAST_UPDATE));
                case RELEASE_YEAR     : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return new Date(buffer.getLong(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_RELEASE_YEAR) - Long.BYTES));
                };
                case TITLE            : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + (0x7f & buffer.get(offset + ENDPOS_TITLE - Byte.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_TITLE)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                case DESCRIPTION      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_DESCRIPTION - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_DESCRIPTION)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                case SPECIAL_FEATURES : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_SPECIAL_FEATURES - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_SPECIAL_FEATURES)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                case RENTAL_RATE      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    final int starts = offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_RENTAL_RATE - Integer.BYTES));
                    final int ends   = offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_RENTAL_RATE);
                    return BigDecimalUtil.deserializeBigDecimal(buffer, starts, ends);
                };
                case REPLACEMENT_COST : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    final int starts = offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_REPLACEMENT_COST - Integer.BYTES));
                    final int ends   = offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_REPLACEMENT_COST);
                    return BigDecimalUtil.deserializeBigDecimal(buffer, starts, ends);
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "rating"           : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return CONSTANTS_RATING[buffer.get(offset + FIELD_RATING)];
                };
                case "last_update"      : return ref -> new Timestamp(bufferFinder.apply(ref).getLong(offsetFinder.applyAsInt(ref) + FIELD_LAST_UPDATE));
                case "release_year"     : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return new Date(buffer.getLong(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_RELEASE_YEAR) - Long.BYTES));
                };
                case "title"            : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + (0x7f & buffer.get(offset + ENDPOS_TITLE - Byte.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_TITLE)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                case "description"      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_DESCRIPTION - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_DESCRIPTION)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                case "special_features" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_SPECIAL_FEATURES - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_SPECIAL_FEATURES)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                case "rental_rate"      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    final int starts = offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_RENTAL_RATE - Integer.BYTES));
                    final int ends   = offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_RENTAL_RATE);
                    return BigDecimalUtil.deserializeBigDecimal(buffer, starts, ends);
                };
                case "replacement_cost" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    final int starts = offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_REPLACEMENT_COST - Integer.BYTES));
                    final int ends   = offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_REPLACEMENT_COST);
                    return BigDecimalUtil.deserializeBigDecimal(buffer, starts, ends);
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public BiLongToIntFunction comparator(final ColumnIdentifier<Film> colId) {
        if (colId instanceof Film.Identifier) {
            final Film.Identifier _id = (Film.Identifier) colId;
            switch (_id) {
                case RATING               : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    return Integer.compare(
                        0xff & aBuffer.get(offsetFinder.applyAsInt(aRef) + FIELD_RATING),
                        0xff & bBuffer.get(offsetFinder.applyAsInt(bRef) + FIELD_RATING)
                    );
                };
                case LANGUAGE_ID          : return (aRef, bRef) -> Short.compare(
                    bufferFinder.apply(aRef).getShort(offsetFinder.applyAsInt(aRef) + FIELD_LANGUAGE_ID),
                    bufferFinder.apply(bRef).getShort(offsetFinder.applyAsInt(bRef) + FIELD_LANGUAGE_ID)
                );
                case RENTAL_DURATION      : return (aRef, bRef) -> Short.compare(
                    bufferFinder.apply(aRef).getShort(offsetFinder.applyAsInt(aRef) + FIELD_RENTAL_DURATION),
                    bufferFinder.apply(bRef).getShort(offsetFinder.applyAsInt(bRef) + FIELD_RENTAL_DURATION)
                );
                case FILM_ID              : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_FILM_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_FILM_ID)
                );
                case LAST_UPDATE          : return (aRef, bRef) -> Long.compare(
                    bufferFinder.apply(aRef).getLong(offsetFinder.applyAsInt(aRef) + FIELD_LAST_UPDATE),
                    bufferFinder.apply(bRef).getLong(offsetFinder.applyAsInt(bRef) + FIELD_LAST_UPDATE)
                );
                case ORIGINAL_LANGUAGE_ID : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Short.compare(
                        aBuf.getShort(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_ORIGINAL_LANGUAGE_ID) - Short.BYTES),
                        bBuf.getShort(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_ORIGINAL_LANGUAGE_ID) - Short.BYTES)
                    );
                };
                case LENGTH               : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Integer.compare(
                        aBuf.getInt(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_LENGTH) - Integer.BYTES),
                        bBuf.getInt(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_LENGTH) - Integer.BYTES)
                    );
                };
                case RELEASE_YEAR         : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Long.compare(
                        aBuf.getLong(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_RELEASE_YEAR) - Long.BYTES),
                        bBuf.getLong(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_RELEASE_YEAR) - Long.BYTES)
                    );
                };
                case TITLE                : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7f & aBuf.get(aOffset + ENDPOS_TITLE - Byte.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7f & bBuf.get(bOffset + ENDPOS_TITLE - Byte.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_TITLE);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_TITLE);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                case DESCRIPTION          : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_DESCRIPTION - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_DESCRIPTION - Integer.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_DESCRIPTION);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_DESCRIPTION);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                case SPECIAL_FEATURES     : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_SPECIAL_FEATURES - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_SPECIAL_FEATURES - Integer.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_SPECIAL_FEATURES);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_SPECIAL_FEATURES);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                case RENTAL_RATE          : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_RENTAL_RATE - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_RENTAL_RATE - Integer.BYTES));
                    final int aEnds = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_RENTAL_RATE);
                    final int bEnds = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_RENTAL_RATE);
                    return BigDecimalUtil.compare(
                        aBuf, aStarts, aEnds, 
                        bBuf, bStarts, bEnds
                    );
                };
                case REPLACEMENT_COST     : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_REPLACEMENT_COST - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_REPLACEMENT_COST - Integer.BYTES));
                    final int aEnds = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_REPLACEMENT_COST);
                    final int bEnds = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_REPLACEMENT_COST);
                    return BigDecimalUtil.compare(
                        aBuf, aStarts, aEnds, 
                        bBuf, bStarts, bEnds
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "rating"               : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    return Integer.compare(
                        0xff & aBuffer.get(offsetFinder.applyAsInt(aRef) + FIELD_RATING),
                        0xff & bBuffer.get(offsetFinder.applyAsInt(bRef) + FIELD_RATING)
                    );
                };
                case "language_id"          : return (aRef, bRef) -> Short.compare(
                    bufferFinder.apply(aRef).getShort(offsetFinder.applyAsInt(aRef) + FIELD_LANGUAGE_ID),
                    bufferFinder.apply(bRef).getShort(offsetFinder.applyAsInt(bRef) + FIELD_LANGUAGE_ID)
                );
                case "rental_duration"      : return (aRef, bRef) -> Short.compare(
                    bufferFinder.apply(aRef).getShort(offsetFinder.applyAsInt(aRef) + FIELD_RENTAL_DURATION),
                    bufferFinder.apply(bRef).getShort(offsetFinder.applyAsInt(bRef) + FIELD_RENTAL_DURATION)
                );
                case "film_id"              : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_FILM_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_FILM_ID)
                );
                case "last_update"          : return (aRef, bRef) -> Long.compare(
                    bufferFinder.apply(aRef).getLong(offsetFinder.applyAsInt(aRef) + FIELD_LAST_UPDATE),
                    bufferFinder.apply(bRef).getLong(offsetFinder.applyAsInt(bRef) + FIELD_LAST_UPDATE)
                );
                case "original_language_id" : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Short.compare(
                        aBuf.getShort(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_ORIGINAL_LANGUAGE_ID) - Short.BYTES),
                        bBuf.getShort(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_ORIGINAL_LANGUAGE_ID) - Short.BYTES)
                    );
                };
                case "length"               : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Integer.compare(
                        aBuf.getInt(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_LENGTH) - Integer.BYTES),
                        bBuf.getInt(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_LENGTH) - Integer.BYTES)
                    );
                };
                case "release_year"         : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Long.compare(
                        aBuf.getLong(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_RELEASE_YEAR) - Long.BYTES),
                        bBuf.getLong(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_RELEASE_YEAR) - Long.BYTES)
                    );
                };
                case "title"                : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7f & aBuf.get(aOffset + ENDPOS_TITLE - Byte.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7f & bBuf.get(bOffset + ENDPOS_TITLE - Byte.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_TITLE);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_TITLE);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                case "description"          : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_DESCRIPTION - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_DESCRIPTION - Integer.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_DESCRIPTION);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_DESCRIPTION);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                case "special_features"     : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_SPECIAL_FEATURES - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_SPECIAL_FEATURES - Integer.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_SPECIAL_FEATURES);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_SPECIAL_FEATURES);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                case "rental_rate"          : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_RENTAL_RATE - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_RENTAL_RATE - Integer.BYTES));
                    final int aEnds = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_RENTAL_RATE);
                    final int bEnds = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_RENTAL_RATE);
                    return BigDecimalUtil.compare(
                        aBuf, aStarts, aEnds, 
                        bBuf, bStarts, bEnds
                    );
                };
                case "replacement_cost"     : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_REPLACEMENT_COST - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_REPLACEMENT_COST - Integer.BYTES));
                    final int aEnds = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_REPLACEMENT_COST);
                    final int bEnds = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_REPLACEMENT_COST);
                    return BigDecimalUtil.compare(
                        aBuf, aStarts, aEnds, 
                        bBuf, bStarts, bEnds
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public BiLongToIntFunction comparatorNullsLast(final ColumnIdentifier<Film> colId) {
        if (colId instanceof Film.Identifier) {
            final Film.Identifier _id = (Film.Identifier) colId;
            switch (_id) {
                case RATING               : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    return Integer.compare(
                        0xff & aBuffer.get(offsetFinder.applyAsInt(aRef) + FIELD_RATING),
                        0xff & bBuffer.get(offsetFinder.applyAsInt(bRef) + FIELD_RATING)
                    );
                };
                case LANGUAGE_ID          : return (aRef, bRef) -> Short.compare(
                    bufferFinder.apply(aRef).getShort(offsetFinder.applyAsInt(aRef) + FIELD_LANGUAGE_ID),
                    bufferFinder.apply(bRef).getShort(offsetFinder.applyAsInt(bRef) + FIELD_LANGUAGE_ID)
                );
                case RENTAL_DURATION      : return (aRef, bRef) -> Short.compare(
                    bufferFinder.apply(aRef).getShort(offsetFinder.applyAsInt(aRef) + FIELD_RENTAL_DURATION),
                    bufferFinder.apply(bRef).getShort(offsetFinder.applyAsInt(bRef) + FIELD_RENTAL_DURATION)
                );
                case FILM_ID              : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_FILM_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_FILM_ID)
                );
                case LAST_UPDATE          : return (aRef, bRef) -> Long.compare(
                    bufferFinder.apply(aRef).getLong(offsetFinder.applyAsInt(aRef) + FIELD_LAST_UPDATE),
                    bufferFinder.apply(bRef).getLong(offsetFinder.applyAsInt(bRef) + FIELD_LAST_UPDATE)
                );
                case ORIGINAL_LANGUAGE_ID : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_ORIGINAL_LANGUAGE_ID);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_ORIGINAL_LANGUAGE_ID);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Short.compare(
                        aBuf.getShort(aOffset + VARSIZE_BEGINS + aEndPos - Short.BYTES),
                        bBuf.getShort(bOffset + VARSIZE_BEGINS + bEndPos - Short.BYTES)
                    );
                };
                case LENGTH               : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_LENGTH);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_LENGTH);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Integer.compare(
                        aBuf.getInt(aOffset + VARSIZE_BEGINS + aEndPos - Integer.BYTES),
                        bBuf.getInt(bOffset + VARSIZE_BEGINS + bEndPos - Integer.BYTES)
                    );
                };
                case RELEASE_YEAR         : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_RELEASE_YEAR);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_RELEASE_YEAR);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Long.compare(
                        aBuf.getLong(aOffset + VARSIZE_BEGINS + aEndPos - Long.BYTES),
                        bBuf.getLong(bOffset + VARSIZE_BEGINS + bEndPos - Long.BYTES)
                    );
                };
                case TITLE                : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7f & aBuf.get(aOffset + ENDPOS_TITLE - Byte.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7f & bBuf.get(bOffset + ENDPOS_TITLE - Byte.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_TITLE);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_TITLE);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                case DESCRIPTION          : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_DESCRIPTION - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_DESCRIPTION - Integer.BYTES));
                    final int aEnds   = aBuf.getInt(aOffset + ENDPOS_DESCRIPTION);
                    final int bEnds   = bBuf.getInt(bOffset + ENDPOS_DESCRIPTION);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return ByteBufferUtil.compare(
                        aBuf, aStarts, aOffset + VARSIZE_BEGINS + aEnds,
                        bBuf, bStarts, bOffset + VARSIZE_BEGINS + bEnds
                    );
                };
                case SPECIAL_FEATURES     : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_SPECIAL_FEATURES - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_SPECIAL_FEATURES - Integer.BYTES));
                    final int aEnds   = aBuf.getInt(aOffset + ENDPOS_SPECIAL_FEATURES);
                    final int bEnds   = bBuf.getInt(bOffset + ENDPOS_SPECIAL_FEATURES);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return ByteBufferUtil.compare(
                        aBuf, aStarts, aOffset + VARSIZE_BEGINS + aEnds,
                        bBuf, bStarts, bOffset + VARSIZE_BEGINS + bEnds
                    );
                };
                case RENTAL_RATE          : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_RENTAL_RATE - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_RENTAL_RATE - Integer.BYTES));
                    final int aEnds = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_RENTAL_RATE);
                    final int bEnds = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_RENTAL_RATE);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return BigDecimalUtil.compare(
                        aBuf, aStarts, aEnds, 
                        bBuf, bStarts, bEnds
                    );
                };
                case REPLACEMENT_COST     : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_REPLACEMENT_COST - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_REPLACEMENT_COST - Integer.BYTES));
                    final int aEnds = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_REPLACEMENT_COST);
                    final int bEnds = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_REPLACEMENT_COST);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return BigDecimalUtil.compare(
                        aBuf, aStarts, aEnds, 
                        bBuf, bStarts, bEnds
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "rating"               : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    return Integer.compare(
                        0xff & aBuffer.get(offsetFinder.applyAsInt(aRef) + FIELD_RATING),
                        0xff & bBuffer.get(offsetFinder.applyAsInt(bRef) + FIELD_RATING)
                    );
                };
                case "language_id"          : return (aRef, bRef) -> Short.compare(
                    bufferFinder.apply(aRef).getShort(offsetFinder.applyAsInt(aRef) + FIELD_LANGUAGE_ID),
                    bufferFinder.apply(bRef).getShort(offsetFinder.applyAsInt(bRef) + FIELD_LANGUAGE_ID)
                );
                case "rental_duration"      : return (aRef, bRef) -> Short.compare(
                    bufferFinder.apply(aRef).getShort(offsetFinder.applyAsInt(aRef) + FIELD_RENTAL_DURATION),
                    bufferFinder.apply(bRef).getShort(offsetFinder.applyAsInt(bRef) + FIELD_RENTAL_DURATION)
                );
                case "film_id"              : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_FILM_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_FILM_ID)
                );
                case "last_update"          : return (aRef, bRef) -> Long.compare(
                    bufferFinder.apply(aRef).getLong(offsetFinder.applyAsInt(aRef) + FIELD_LAST_UPDATE),
                    bufferFinder.apply(bRef).getLong(offsetFinder.applyAsInt(bRef) + FIELD_LAST_UPDATE)
                );
                case "original_language_id" : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_ORIGINAL_LANGUAGE_ID);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_ORIGINAL_LANGUAGE_ID);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Short.compare(
                        aBuf.getShort(aOffset + VARSIZE_BEGINS + aEndPos - Short.BYTES),
                        bBuf.getShort(bOffset + VARSIZE_BEGINS + bEndPos - Short.BYTES)
                    );
                };
                case "length"               : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_LENGTH);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_LENGTH);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Integer.compare(
                        aBuf.getInt(aOffset + VARSIZE_BEGINS + aEndPos - Integer.BYTES),
                        bBuf.getInt(bOffset + VARSIZE_BEGINS + bEndPos - Integer.BYTES)
                    );
                };
                case "release_year"         : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_RELEASE_YEAR);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_RELEASE_YEAR);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Long.compare(
                        aBuf.getLong(aOffset + VARSIZE_BEGINS + aEndPos - Long.BYTES),
                        bBuf.getLong(bOffset + VARSIZE_BEGINS + bEndPos - Long.BYTES)
                    );
                };
                case "title"                : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7f & aBuf.get(aOffset + ENDPOS_TITLE - Byte.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7f & bBuf.get(bOffset + ENDPOS_TITLE - Byte.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_TITLE);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_TITLE);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                case "description"          : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_DESCRIPTION - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_DESCRIPTION - Integer.BYTES));
                    final int aEnds   = aBuf.getInt(aOffset + ENDPOS_DESCRIPTION);
                    final int bEnds   = bBuf.getInt(bOffset + ENDPOS_DESCRIPTION);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return ByteBufferUtil.compare(
                        aBuf, aStarts, aOffset + VARSIZE_BEGINS + aEnds,
                        bBuf, bStarts, bOffset + VARSIZE_BEGINS + bEnds
                    );
                };
                case "special_features"     : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_SPECIAL_FEATURES - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_SPECIAL_FEATURES - Integer.BYTES));
                    final int aEnds   = aBuf.getInt(aOffset + ENDPOS_SPECIAL_FEATURES);
                    final int bEnds   = bBuf.getInt(bOffset + ENDPOS_SPECIAL_FEATURES);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return ByteBufferUtil.compare(
                        aBuf, aStarts, aOffset + VARSIZE_BEGINS + aEnds,
                        bBuf, bStarts, bOffset + VARSIZE_BEGINS + bEnds
                    );
                };
                case "rental_rate"          : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_RENTAL_RATE - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_RENTAL_RATE - Integer.BYTES));
                    final int aEnds = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_RENTAL_RATE);
                    final int bEnds = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_RENTAL_RATE);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return BigDecimalUtil.compare(
                        aBuf, aStarts, aEnds, 
                        bBuf, bStarts, bEnds
                    );
                };
                case "replacement_cost"     : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_REPLACEMENT_COST - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_REPLACEMENT_COST - Integer.BYTES));
                    final int aEnds = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_REPLACEMENT_COST);
                    final int bEnds = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_REPLACEMENT_COST);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return BigDecimalUtil.compare(
                        aBuf, aStarts, aEnds, 
                        bBuf, bStarts, bEnds
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction compareToByte(final ColumnIdentifier<Film> colId, final byte value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type byte.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToShort(final ColumnIdentifier<Film> colId, final short value) {
        if (colId instanceof Film.Identifier) {
            final Film.Identifier _id = (Film.Identifier) colId;
            switch (_id) {
                case LANGUAGE_ID          : {
                    final short operand = value;
                    return ref -> Short.compare(
                        bufferFinder.apply(ref).getShort(offsetFinder.applyAsInt(ref) + FIELD_LANGUAGE_ID),
                        operand
                    );
                }
                case RENTAL_DURATION      : {
                    final short operand = value;
                    return ref -> Short.compare(
                        bufferFinder.apply(ref).getShort(offsetFinder.applyAsInt(ref) + FIELD_RENTAL_DURATION),
                        operand
                    );
                }
                case ORIGINAL_LANGUAGE_ID : {
                    final short operand = value;
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        final int endPos = buffer.get(offset + ENDPOS_ORIGINAL_LANGUAGE_ID);
                        if (endPos < 0) return 1;
                        else return Short.compare(
                            buffer.getShort(offset + VARSIZE_BEGINS + endPos - Short.BYTES),
                            operand
                        );
                    };
                }
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type short.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "language_id"          : {
                    final short operand = value;
                    return ref -> Short.compare(
                        bufferFinder.apply(ref).getShort(offsetFinder.applyAsInt(ref) + FIELD_LANGUAGE_ID),
                        operand
                    );
                }
                case "rental_duration"      : {
                    final short operand = value;
                    return ref -> Short.compare(
                        bufferFinder.apply(ref).getShort(offsetFinder.applyAsInt(ref) + FIELD_RENTAL_DURATION),
                        operand
                    );
                }
                case "original_language_id" : {
                    final short operand = value;
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        final int endPos = buffer.get(offset + ENDPOS_ORIGINAL_LANGUAGE_ID);
                        if (endPos < 0) return 1;
                        else return Short.compare(
                            buffer.getShort(offset + VARSIZE_BEGINS + endPos - Short.BYTES),
                            operand
                        );
                    };
                }
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type short.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction compareToInt(final ColumnIdentifier<Film> colId, final int value) {
        if (colId instanceof Film.Identifier) {
            final Film.Identifier _id = (Film.Identifier) colId;
            switch (_id) {
                case FILM_ID : {
                    final int operand = value;
                    return ref -> Integer.compare(
                        bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_FILM_ID),
                        operand
                    );
                }
                case LENGTH  : {
                    final int operand = value;
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        final int endPos = buffer.get(offset + ENDPOS_LENGTH);
                        if (endPos < 0) return 1;
                        else return Integer.compare(
                            buffer.getInt(offset + VARSIZE_BEGINS + endPos - Integer.BYTES),
                            operand
                        );
                    };
                }
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type int.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "film_id" : {
                    final int operand = value;
                    return ref -> Integer.compare(
                        bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_FILM_ID),
                        operand
                    );
                }
                case "length"  : {
                    final int operand = value;
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        final int endPos = buffer.get(offset + ENDPOS_LENGTH);
                        if (endPos < 0) return 1;
                        else return Integer.compare(
                            buffer.getInt(offset + VARSIZE_BEGINS + endPos - Integer.BYTES),
                            operand
                        );
                    };
                }
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type int.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction compareToLong(final ColumnIdentifier<Film> colId, final long value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type long.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToFloat(final ColumnIdentifier<Film> colId, final float value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type float.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToDouble(final ColumnIdentifier<Film> colId, final double value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type double.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToBoolean(final ColumnIdentifier<Film> colId, final boolean value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type boolean.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToChar(final ColumnIdentifier<Film> colId, final char value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type char.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToObject(final ColumnIdentifier<Film> colId, final Object value) {
        if (colId instanceof Film.Identifier) {
            final Film.Identifier _id = (Film.Identifier) colId;
            switch (_id) {
                case RATING           : {
                    final int i = ((Rating) value).ordinal();
                    return ref -> Integer.compare(0xff & bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + FIELD_RATING), i);
                }
                case LAST_UPDATE      : {
                    final long operand = ((Timestamp) value).getTime();
                    return ref -> Long.compare(
                        bufferFinder.apply(ref).getLong(offsetFinder.applyAsInt(ref) + FIELD_LAST_UPDATE),
                        operand
                    );
                }
                case RELEASE_YEAR     : {
                    final long operand = ((Date) value).getTime();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        final int endPos = buffer.get(offset + ENDPOS_RELEASE_YEAR);
                        if (endPos < 0) return 1;
                        else return Long.compare(
                            buffer.getLong(offset + VARSIZE_BEGINS + endPos - Long.BYTES),
                            operand
                        );
                    };
                }
                case TITLE            : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + (0x7f & buffer.get(offset + ENDPOS_TITLE - Byte.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_TITLE),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                case DESCRIPTION      : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_DESCRIPTION - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_DESCRIPTION),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                case SPECIAL_FEATURES : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_SPECIAL_FEATURES - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_SPECIAL_FEATURES),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                case RENTAL_RATE      : {
                    final BigDecimal casted = (BigDecimal) value;
                    final int sign = casted.signum();
                    if (sign == 0) {
                        return ref -> {
                            final ByteBuffer buffer = bufferFinder.apply(ref);
                            final int offset = offsetFinder.applyAsInt(ref);
                            final int startPos = (0x7fffffff & buffer.getInt(offset + ENDPOS_RENTAL_RATE - Integer.BYTES));
                            final int endPos = buffer.getInt(offset + ENDPOS_RENTAL_RATE);
                            if (startPos + 4 == endPos) return 0;
                            else if ((buffer.get(offset + VARSIZE_BEGINS + startPos + 4) & 0x80) == 0) {
                                return 1; // Greater than 0
                            } else return -1; // Less than 0
                        };
                    }
                    final int scale = casted.scale();
                    final byte[] bytes = BigDecimalUtil.asByteArray(casted);
                    final ByteBuffer wrapped = ByteBuffer.allocate(4 + bytes.length);
                    wrapped.putInt(scale);
                    wrapped.put(bytes);
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        int starts = offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_RENTAL_RATE - Integer.BYTES));
                        int ends = offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_RENTAL_RATE);
                        return BigDecimalUtil.compare(
                            buffer, starts, ends,
                            wrapped, 0, wrapped.capacity()
                        );
                    };
                }
                case REPLACEMENT_COST : {
                    final BigDecimal casted = (BigDecimal) value;
                    final int sign = casted.signum();
                    if (sign == 0) {
                        return ref -> {
                            final ByteBuffer buffer = bufferFinder.apply(ref);
                            final int offset = offsetFinder.applyAsInt(ref);
                            final int startPos = (0x7fffffff & buffer.getInt(offset + ENDPOS_REPLACEMENT_COST - Integer.BYTES));
                            final int endPos = buffer.getInt(offset + ENDPOS_REPLACEMENT_COST);
                            if (startPos + 4 == endPos) return 0;
                            else if ((buffer.get(offset + VARSIZE_BEGINS + startPos + 4) & 0x80) == 0) {
                                return 1; // Greater than 0
                            } else return -1; // Less than 0
                        };
                    }
                    final int scale = casted.scale();
                    final byte[] bytes = BigDecimalUtil.asByteArray(casted);
                    final ByteBuffer wrapped = ByteBuffer.allocate(4 + bytes.length);
                    wrapped.putInt(scale);
                    wrapped.put(bytes);
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        int starts = offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_REPLACEMENT_COST - Integer.BYTES));
                        int ends = offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_REPLACEMENT_COST);
                        return BigDecimalUtil.compare(
                            buffer, starts, ends,
                            wrapped, 0, wrapped.capacity()
                        );
                    };
                }
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type object.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "rating"           : {
                    final int i = ((Rating) value).ordinal();
                    return ref -> Integer.compare(0xff & bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + FIELD_RATING), i);
                }
                case "last_update"      : {
                    final long operand = ((Timestamp) value).getTime();
                    return ref -> Long.compare(
                        bufferFinder.apply(ref).getLong(offsetFinder.applyAsInt(ref) + FIELD_LAST_UPDATE),
                        operand
                    );
                }
                case "release_year"     : {
                    final long operand = ((Date) value).getTime();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        final int endPos = buffer.get(offset + ENDPOS_RELEASE_YEAR);
                        if (endPos < 0) return 1;
                        else return Long.compare(
                            buffer.getLong(offset + VARSIZE_BEGINS + endPos - Long.BYTES),
                            operand
                        );
                    };
                }
                case "title"            : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + (0x7f & buffer.get(offset + ENDPOS_TITLE - Byte.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_TITLE),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                case "description"      : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_DESCRIPTION - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_DESCRIPTION),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                case "special_features" : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_SPECIAL_FEATURES - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_SPECIAL_FEATURES),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                case "rental_rate"      : {
                    final BigDecimal casted = (BigDecimal) value;
                    final int sign = casted.signum();
                    if (sign == 0) {
                        return ref -> {
                            final ByteBuffer buffer = bufferFinder.apply(ref);
                            final int offset = offsetFinder.applyAsInt(ref);
                            final int startPos = (0x7fffffff & buffer.getInt(offset + ENDPOS_RENTAL_RATE - Integer.BYTES));
                            final int endPos = buffer.getInt(offset + ENDPOS_RENTAL_RATE);
                            if (startPos + 4 == endPos) return 0;
                            else if ((buffer.get(offset + VARSIZE_BEGINS + startPos + 4) & 0x80) == 0) {
                                return 1; // Greater than 0
                            } else return -1; // Less than 0
                        };
                    }
                    final int scale = casted.scale();
                    final byte[] bytes = BigDecimalUtil.asByteArray(casted);
                    final ByteBuffer wrapped = ByteBuffer.allocate(4 + bytes.length);
                    wrapped.putInt(scale);
                    wrapped.put(bytes);
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        int starts = offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_RENTAL_RATE - Integer.BYTES));
                        int ends = offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_RENTAL_RATE);
                        return BigDecimalUtil.compare(
                            buffer, starts, ends,
                            wrapped, 0, wrapped.capacity()
                        );
                    };
                }
                case "replacement_cost" : {
                    final BigDecimal casted = (BigDecimal) value;
                    final int sign = casted.signum();
                    if (sign == 0) {
                        return ref -> {
                            final ByteBuffer buffer = bufferFinder.apply(ref);
                            final int offset = offsetFinder.applyAsInt(ref);
                            final int startPos = (0x7fffffff & buffer.getInt(offset + ENDPOS_REPLACEMENT_COST - Integer.BYTES));
                            final int endPos = buffer.getInt(offset + ENDPOS_REPLACEMENT_COST);
                            if (startPos + 4 == endPos) return 0;
                            else if ((buffer.get(offset + VARSIZE_BEGINS + startPos + 4) & 0x80) == 0) {
                                return 1; // Greater than 0
                            } else return -1; // Less than 0
                        };
                    }
                    final int scale = casted.scale();
                    final byte[] bytes = BigDecimalUtil.asByteArray(casted);
                    final ByteBuffer wrapped = ByteBuffer.allocate(4 + bytes.length);
                    wrapped.putInt(scale);
                    wrapped.put(bytes);
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        int starts = offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_REPLACEMENT_COST - Integer.BYTES));
                        int ends = offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_REPLACEMENT_COST);
                        return BigDecimalUtil.compare(
                            buffer, starts, ends,
                            wrapped, 0, wrapped.capacity()
                        );
                    };
                }
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type object.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction compareToNull(final ColumnIdentifier<Film> colId) {
        if (colId instanceof Film.Identifier) {
            final Film.Identifier _id = (Film.Identifier) colId;
            switch (_id) {
                case RATING               : {
                    return ref -> Integer.compare(0xff & bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + FIELD_RATING), (byte) 0xff);
                }
                case LANGUAGE_ID          : 
                case RENTAL_DURATION      : 
                case FILM_ID              : 
                case LAST_UPDATE          : return ALWAYS_LESS;
                case ORIGINAL_LANGUAGE_ID : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_ORIGINAL_LANGUAGE_ID) < 0 ? 0 : -1;
                };
                case LENGTH               : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_LENGTH) < 0 ? 0 : -1;
                };
                case RELEASE_YEAR         : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_RELEASE_YEAR) < 0 ? 0 : -1;
                };
                case TITLE                : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_TITLE) < 0 ? 0 : -1;
                case DESCRIPTION          : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_DESCRIPTION) < 0 ? 0 : -1;
                case SPECIAL_FEATURES     : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_SPECIAL_FEATURES) < 0 ? 0 : -1;
                case RENTAL_RATE          : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_RENTAL_RATE) < 0 ? 0 : -1;
                case REPLACEMENT_COST     : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_REPLACEMENT_COST) < 0 ? 0 : -1;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "rating"               : {
                    return ref -> Integer.compare(0xff & bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + FIELD_RATING), (byte) 0xff);
                }
                case "language_id"          : 
                case "rental_duration"      : 
                case "film_id"              : 
                case "last_update"          : return ALWAYS_LESS;
                case "original_language_id" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_ORIGINAL_LANGUAGE_ID) < 0 ? 0 : -1;
                };
                case "length"               : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_LENGTH) < 0 ? 0 : -1;
                };
                case "release_year"         : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_RELEASE_YEAR) < 0 ? 0 : -1;
                };
                case "title"                : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_TITLE) < 0 ? 0 : -1;
                case "description"          : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_DESCRIPTION) < 0 ? 0 : -1;
                case "special_features"     : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_SPECIAL_FEATURES) < 0 ? 0 : -1;
                case "rental_rate"          : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_RENTAL_RATE) < 0 ? 0 : -1;
                case "replacement_cost"     : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_REPLACEMENT_COST) < 0 ? 0 : -1;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongPredicate newPredicate(final ColumnIdentifier<Film> colId, final EntityStorePredicate predicate) {
        if (colId instanceof Film.Identifier) {
            final Film.Identifier _id = (Film.Identifier) colId;
            switch (_id) {
                case RATING               : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_RATING;
                    return predicate.test(buffer, begins, begins + 1);
                };
                case LANGUAGE_ID          : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_LANGUAGE_ID;
                    return predicate.test(buffer, begins, begins + Short.BYTES);
                };
                case RENTAL_DURATION      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_RENTAL_DURATION;
                    return predicate.test(buffer, begins, begins + Short.BYTES);
                };
                case FILM_ID              : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_FILM_ID;
                    return predicate.test(buffer, begins, begins + Integer.BYTES);
                };
                case LAST_UPDATE          : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_LAST_UPDATE;
                    return predicate.test(buffer, begins, begins + 8);
                };
                case ORIGINAL_LANGUAGE_ID : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_ORIGINAL_LANGUAGE_ID)
                    );
                };
                case LENGTH               : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_LENGTH - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_LENGTH)
                    );
                };
                case RELEASE_YEAR         : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_RELEASE_YEAR - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_RELEASE_YEAR)
                    );
                };
                case TITLE                : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_TITLE - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_TITLE)
                    );
                };
                case DESCRIPTION          : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_DESCRIPTION - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_DESCRIPTION)
                    );
                };
                case SPECIAL_FEATURES     : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_SPECIAL_FEATURES - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_SPECIAL_FEATURES)
                    );
                };
                case RENTAL_RATE          : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_RENTAL_RATE - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_RENTAL_RATE)
                    );
                };
                case REPLACEMENT_COST     : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_REPLACEMENT_COST - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_REPLACEMENT_COST)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "rating"               : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_RATING;
                    return predicate.test(buffer, begins, begins + 1);
                };
                case "language_id"          : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_LANGUAGE_ID;
                    return predicate.test(buffer, begins, begins + Short.BYTES);
                };
                case "rental_duration"      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_RENTAL_DURATION;
                    return predicate.test(buffer, begins, begins + Short.BYTES);
                };
                case "film_id"              : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_FILM_ID;
                    return predicate.test(buffer, begins, begins + Integer.BYTES);
                };
                case "last_update"          : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_LAST_UPDATE;
                    return predicate.test(buffer, begins, begins + 8);
                };
                case "original_language_id" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_ORIGINAL_LANGUAGE_ID)
                    );
                };
                case "length"               : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_LENGTH - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_LENGTH)
                    );
                };
                case "release_year"         : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_RELEASE_YEAR - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_RELEASE_YEAR)
                    );
                };
                case "title"                : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_TITLE - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_TITLE)
                    );
                };
                case "description"          : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_DESCRIPTION - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_DESCRIPTION)
                    );
                };
                case "special_features"     : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_SPECIAL_FEATURES - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_SPECIAL_FEATURES)
                    );
                };
                case "rental_rate"          : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_RENTAL_RATE - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_RENTAL_RATE)
                    );
                };
                case "replacement_cost"     : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_REPLACEMENT_COST - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_REPLACEMENT_COST)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction newCompareTo(final ColumnIdentifier<Film> colId, final EntityStoreCompareTo compareTo) {
        if (colId instanceof Film.Identifier) {
            final Film.Identifier _id = (Film.Identifier) colId;
            switch (_id) {
                case RATING               : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_RATING;
                    return compareTo.compare(buffer, begins, begins + 1);
                };
                case LANGUAGE_ID          : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_LANGUAGE_ID;
                    return compareTo.compare(buffer, begins, begins + Short.BYTES);
                };
                case RENTAL_DURATION      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_RENTAL_DURATION;
                    return compareTo.compare(buffer, begins, begins + Short.BYTES);
                };
                case FILM_ID              : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_FILM_ID;
                    return compareTo.compare(buffer, begins, begins + Integer.BYTES);
                };
                case LAST_UPDATE          : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_LAST_UPDATE;
                    return compareTo.compare(buffer, begins, begins + 8);
                };
                case ORIGINAL_LANGUAGE_ID : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_ORIGINAL_LANGUAGE_ID)
                    );
                };
                case LENGTH               : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_LENGTH - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_LENGTH)
                    );
                };
                case RELEASE_YEAR         : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_RELEASE_YEAR - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_RELEASE_YEAR)
                    );
                };
                case TITLE                : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_TITLE - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_TITLE)
                    );
                };
                case DESCRIPTION          : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_DESCRIPTION - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_DESCRIPTION)
                    );
                };
                case SPECIAL_FEATURES     : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_SPECIAL_FEATURES - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_SPECIAL_FEATURES)
                    );
                };
                case RENTAL_RATE          : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_RENTAL_RATE - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_RENTAL_RATE)
                    );
                };
                case REPLACEMENT_COST     : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_REPLACEMENT_COST - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_REPLACEMENT_COST)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "rating"               : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_RATING;
                    return compareTo.compare(buffer, begins, begins + 1);
                };
                case "language_id"          : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_LANGUAGE_ID;
                    return compareTo.compare(buffer, begins, begins + Short.BYTES);
                };
                case "rental_duration"      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_RENTAL_DURATION;
                    return compareTo.compare(buffer, begins, begins + Short.BYTES);
                };
                case "film_id"              : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_FILM_ID;
                    return compareTo.compare(buffer, begins, begins + Integer.BYTES);
                };
                case "last_update"          : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_LAST_UPDATE;
                    return compareTo.compare(buffer, begins, begins + 8);
                };
                case "original_language_id" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_ORIGINAL_LANGUAGE_ID)
                    );
                };
                case "length"               : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_LENGTH - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_LENGTH)
                    );
                };
                case "release_year"         : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_RELEASE_YEAR - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_RELEASE_YEAR)
                    );
                };
                case "title"                : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_TITLE - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_TITLE)
                    );
                };
                case "description"          : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_DESCRIPTION - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_DESCRIPTION)
                    );
                };
                case "special_features"     : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_SPECIAL_FEATURES - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_SPECIAL_FEATURES)
                    );
                };
                case "rental_rate"          : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_RENTAL_RATE - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_RENTAL_RATE)
                    );
                };
                case "replacement_cost"     : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_REPLACEMENT_COST - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_REPLACEMENT_COST)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public BiLongToIntFunction newComparator(final ColumnIdentifier<Film> colId, final EntityStoreComparator comparator) {
        if (colId instanceof Film.Identifier) {
            final Film.Identifier _id = (Film.Identifier) colId;
            switch (_id) {
                case RATING               : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_RATING;
                    final int bBegins = bRowOffset + FIELD_RATING;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + 1,
                        bBuffer, bBegins, bBegins + 1
                    );
                };
                case LANGUAGE_ID          : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_LANGUAGE_ID;
                    final int bBegins = bRowOffset + FIELD_LANGUAGE_ID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Short.BYTES,
                        bBuffer, bBegins, bBegins + Short.BYTES
                    );
                };
                case RENTAL_DURATION      : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_RENTAL_DURATION;
                    final int bBegins = bRowOffset + FIELD_RENTAL_DURATION;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Short.BYTES,
                        bBuffer, bBegins, bBegins + Short.BYTES
                    );
                };
                case FILM_ID              : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_FILM_ID;
                    final int bBegins = bRowOffset + FIELD_FILM_ID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Integer.BYTES,
                        bBuffer, bBegins, bBegins + Integer.BYTES
                    );
                };
                case LAST_UPDATE          : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_LAST_UPDATE;
                    final int bBegins = bRowOffset + FIELD_LAST_UPDATE;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + 8,
                        bBuffer, bBegins, bBegins + 8
                    );
                };
                case ORIGINAL_LANGUAGE_ID : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS, aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_ORIGINAL_LANGUAGE_ID), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS, bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_ORIGINAL_LANGUAGE_ID)
                    );
                };
                case LENGTH               : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_LENGTH - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_LENGTH), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_LENGTH - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_LENGTH)
                    );
                };
                case RELEASE_YEAR         : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_RELEASE_YEAR - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_RELEASE_YEAR), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_RELEASE_YEAR - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_RELEASE_YEAR)
                    );
                };
                case TITLE                : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_TITLE - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_TITLE), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_TITLE - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_TITLE)
                    );
                };
                case DESCRIPTION          : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7fffffff & aBuffer.getInt(aRowOffset + ENDPOS_DESCRIPTION - Integer.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_DESCRIPTION), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7fffffff & bBuffer.getInt(bRowOffset + ENDPOS_DESCRIPTION - Integer.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_DESCRIPTION)
                    );
                };
                case SPECIAL_FEATURES     : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7fffffff & aBuffer.getInt(aRowOffset + ENDPOS_SPECIAL_FEATURES - Integer.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_SPECIAL_FEATURES), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7fffffff & bBuffer.getInt(bRowOffset + ENDPOS_SPECIAL_FEATURES - Integer.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_SPECIAL_FEATURES)
                    );
                };
                case RENTAL_RATE          : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7fffffff & aBuffer.getInt(aRowOffset + ENDPOS_RENTAL_RATE - Integer.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_RENTAL_RATE), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7fffffff & bBuffer.getInt(bRowOffset + ENDPOS_RENTAL_RATE - Integer.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_RENTAL_RATE)
                    );
                };
                case REPLACEMENT_COST     : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7fffffff & aBuffer.getInt(aRowOffset + ENDPOS_REPLACEMENT_COST - Integer.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_REPLACEMENT_COST), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7fffffff & bBuffer.getInt(bRowOffset + ENDPOS_REPLACEMENT_COST - Integer.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_REPLACEMENT_COST)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "rating"               : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_RATING;
                    final int bBegins = bRowOffset + FIELD_RATING;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + 1,
                        bBuffer, bBegins, bBegins + 1
                    );
                };
                case "language_id"          : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_LANGUAGE_ID;
                    final int bBegins = bRowOffset + FIELD_LANGUAGE_ID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Short.BYTES,
                        bBuffer, bBegins, bBegins + Short.BYTES
                    );
                };
                case "rental_duration"      : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_RENTAL_DURATION;
                    final int bBegins = bRowOffset + FIELD_RENTAL_DURATION;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Short.BYTES,
                        bBuffer, bBegins, bBegins + Short.BYTES
                    );
                };
                case "film_id"              : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_FILM_ID;
                    final int bBegins = bRowOffset + FIELD_FILM_ID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Integer.BYTES,
                        bBuffer, bBegins, bBegins + Integer.BYTES
                    );
                };
                case "last_update"          : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_LAST_UPDATE;
                    final int bBegins = bRowOffset + FIELD_LAST_UPDATE;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + 8,
                        bBuffer, bBegins, bBegins + 8
                    );
                };
                case "original_language_id" : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS, aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_ORIGINAL_LANGUAGE_ID), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS, bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_ORIGINAL_LANGUAGE_ID)
                    );
                };
                case "length"               : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_LENGTH - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_LENGTH), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_LENGTH - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_LENGTH)
                    );
                };
                case "release_year"         : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_RELEASE_YEAR - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_RELEASE_YEAR), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_RELEASE_YEAR - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_RELEASE_YEAR)
                    );
                };
                case "title"                : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_TITLE - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_TITLE), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_TITLE - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_TITLE)
                    );
                };
                case "description"          : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7fffffff & aBuffer.getInt(aRowOffset + ENDPOS_DESCRIPTION - Integer.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_DESCRIPTION), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7fffffff & bBuffer.getInt(bRowOffset + ENDPOS_DESCRIPTION - Integer.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_DESCRIPTION)
                    );
                };
                case "special_features"     : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7fffffff & aBuffer.getInt(aRowOffset + ENDPOS_SPECIAL_FEATURES - Integer.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_SPECIAL_FEATURES), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7fffffff & bBuffer.getInt(bRowOffset + ENDPOS_SPECIAL_FEATURES - Integer.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_SPECIAL_FEATURES)
                    );
                };
                case "rental_rate"          : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7fffffff & aBuffer.getInt(aRowOffset + ENDPOS_RENTAL_RATE - Integer.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_RENTAL_RATE), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7fffffff & bBuffer.getInt(bRowOffset + ENDPOS_RENTAL_RATE - Integer.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_RENTAL_RATE)
                    );
                };
                case "replacement_cost"     : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7fffffff & aBuffer.getInt(aRowOffset + ENDPOS_REPLACEMENT_COST - Integer.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_REPLACEMENT_COST), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7fffffff & bBuffer.getInt(bRowOffset + ENDPOS_REPLACEMENT_COST - Integer.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_REPLACEMENT_COST)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction sizeOf() {
        return ref -> VARSIZE_BEGINS + Math.abs(bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_REPLACEMENT_COST));
    }
}