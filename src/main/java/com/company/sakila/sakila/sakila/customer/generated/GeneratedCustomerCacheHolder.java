package com.company.sakila.sakila.sakila.customer.generated;

import com.company.sakila.sakila.sakila.customer.Customer;
import com.company.sakila.sakila.sakila.customer.CustomerEntityStoreSerializerImpl;
import com.company.sakila.sakila.sakila.customer.CustomerManager;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.tuple.Tuple2;
import com.speedment.common.tuple.Tuples;
import com.speedment.enterprise.datastore.runtime.HasStatistics.Statistics;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStore;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreHolder;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfComparable;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfInt;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfShort;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfString;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.datastore.runtime.fieldcache.MultiFieldCache;
import com.speedment.enterprise.datastore.runtime.internal.util.StatisticsInternalUtil;
import com.speedment.enterprise.datastore.runtime.util.DataStoreHolderUtil;
import com.speedment.runtime.bulk.PersistOperation;
import com.speedment.runtime.bulk.RemoveOperation;
import com.speedment.runtime.bulk.UpdateOperation;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.ColumnLabel;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.StreamSupplierComponent;
import com.speedment.runtime.field.Field;
import com.speedment.runtime.field.trait.HasIdentifier;

import java.sql.Timestamp;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.stream.Stream;

import static java.util.Objects.requireNonNull;
import static java.util.stream.Collectors.toMap;
import static java.util.stream.Collectors.toSet;

/**
 * A holder class for the various caches that are used to speed up the {@link
 * CustomerManager}.
 * 
 * Generated by
 * com.speedment.enterprise.datastore.generator.internal.code.GeneratedEntityCacheHolderTranslator
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public final class GeneratedCustomerCacheHolder implements EntityStoreHolder<Customer> {
    
    private final EntityStore<Customer> entityStore;
    private final OfInt fieldCustomerIdCache;
    private final OfShort fieldStoreIdCache;
    private final OfString fieldFirstNameCache;
    private final OfString fieldLastNameCache;
    private final OfString fieldEmailCache;
    private final OfInt fieldAddressIdCache;
    private final OfInt fieldActiveCache;
    private final OfComparable<Timestamp> fieldCreateDateCache;
    private final OfComparable<Timestamp> fieldLastUpdateCache;
    
    public GeneratedCustomerCacheHolder(
            EntityStore<Customer> entityStore,
            OfInt fieldCustomerIdCache,
            OfShort fieldStoreIdCache,
            OfString fieldFirstNameCache,
            OfString fieldLastNameCache,
            OfString fieldEmailCache,
            OfInt fieldAddressIdCache,
            OfInt fieldActiveCache,
            OfComparable<Timestamp> fieldCreateDateCache,
            OfComparable<Timestamp> fieldLastUpdateCache) {
        
        this.entityStore          = requireNonNull(entityStore);
        this.fieldCustomerIdCache = requireNonNull(fieldCustomerIdCache);
        this.fieldStoreIdCache    = requireNonNull(fieldStoreIdCache);
        this.fieldFirstNameCache  = requireNonNull(fieldFirstNameCache);
        this.fieldLastNameCache   = requireNonNull(fieldLastNameCache);
        this.fieldEmailCache      = requireNonNull(fieldEmailCache);
        this.fieldAddressIdCache  = requireNonNull(fieldAddressIdCache);
        this.fieldActiveCache     = requireNonNull(fieldActiveCache);
        this.fieldCreateDateCache = requireNonNull(fieldCreateDateCache);
        this.fieldLastUpdateCache = requireNonNull(fieldLastUpdateCache);
    }
    
    @Override
    public EntityStore<Customer> getEntityStore() {
        return entityStore;
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <CACHE extends FieldCache<CACHE>> CACHE getFieldCache(ColumnIdentifier<Customer> columnId) {
        if (columnId instanceof Customer.Identifier) {
            final Customer.Identifier _id = (Customer.Identifier) columnId;
            switch (_id) {
                case CUSTOMER_ID : return (CACHE) fieldCustomerIdCache;
                case STORE_ID    : return (CACHE) fieldStoreIdCache;
                case FIRST_NAME  : return (CACHE) fieldFirstNameCache;
                case LAST_NAME   : return (CACHE) fieldLastNameCache;
                case EMAIL       : return (CACHE) fieldEmailCache;
                case ADDRESS_ID  : return (CACHE) fieldAddressIdCache;
                case ACTIVE      : return (CACHE) fieldActiveCache;
                case CREATE_DATE : return (CACHE) fieldCreateDateCache;
                case LAST_UPDATE : return (CACHE) fieldLastUpdateCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = columnId.getColumnId();
            switch (_colName) {
                case "customer_id" : return (CACHE) fieldCustomerIdCache;
                case "store_id"    : return (CACHE) fieldStoreIdCache;
                case "first_name"  : return (CACHE) fieldFirstNameCache;
                case "last_name"   : return (CACHE) fieldLastNameCache;
                case "email"       : return (CACHE) fieldEmailCache;
                case "address_id"  : return (CACHE) fieldAddressIdCache;
                case "active"      : return (CACHE) fieldActiveCache;
                case "create_date" : return (CACHE) fieldCreateDateCache;
                case "last_update" : return (CACHE) fieldLastUpdateCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public boolean isHavingMultiFieldCache(ColumnIdentifier<Customer> columnId) {
        return false;
    }
    
    public static CompletableFuture<GeneratedCustomerCacheHolder> reload(StreamSupplierComponent streamSupplier, ExecutorService executor) {
        return reload(DataStoreHolderUtil.buildEntityStore(
            streamSupplier,
            executor,
            CustomerEntityStoreSerializerImpl::new,
            TableIdentifier.of("sakila", "sakila", "customer")
        ), executor);
    }
    
    @Override
    public EntityStoreHolder<Customer> recycleAndPersist(PersistOperation<Customer> persistOperation) {
        return wrapped().recycleAndPersist(persistOperation);
    }
    
    @Override
    public EntityStoreHolder<Customer> recycleAndRemove(RemoveOperation<Customer> removeOperation) {
        return wrapped().recycleAndRemove(removeOperation);
    }
    
    @Override
    public EntityStoreHolder<Customer> recycleAndUpdate(UpdateOperation<Customer> updateOperation) {
        return wrapped().recycleAndUpdate(updateOperation);
    }
    
    private EntityStoreHolder<Customer> wrapped() {
        // Use explicit type for Stream to improve compilation time.
        final Map<ColumnLabel, FieldCache<?>> fieldCaches = Stream.<Tuple2<HasIdentifier<Customer>, FieldCache<?>>>of(
            Tuples.of(Customer.CUSTOMER_ID,fieldCustomerIdCache),
            Tuples.of(Customer.STORE_ID,   fieldStoreIdCache),
            Tuples.of(Customer.FIRST_NAME, fieldFirstNameCache),
            Tuples.of(Customer.LAST_NAME,  fieldLastNameCache),
            Tuples.of(Customer.EMAIL,      fieldEmailCache),
            Tuples.of(Customer.ADDRESS_ID, fieldAddressIdCache),
            Tuples.of(Customer.ACTIVE,     fieldActiveCache),
            Tuples.of(Customer.CREATE_DATE,fieldCreateDateCache),
            Tuples.of(Customer.LAST_UPDATE,fieldLastUpdateCache)
        )
            .collect(toMap(t2 -> t2.get0().identifier().label(), Tuple2::get1));
        final Map<ColumnLabel,  Map<ColumnLabel, MultiFieldCache<?, ?, ?>>>  multiFieldCaches = createMultiCacheMap();
        final Set<ColumnIdentifier<Customer>> columnIdentifiers = Stream.<HasIdentifier<Customer>>of(
            Customer.CUSTOMER_ID,
            Customer.STORE_ID,
            Customer.FIRST_NAME,
            Customer.LAST_NAME,
            Customer.EMAIL,
            Customer.ADDRESS_ID,
            Customer.ACTIVE,
            Customer.CREATE_DATE,
            Customer.LAST_UPDATE
        )
            .map(HasIdentifier::identifier)
            .collect(toSet());
        return EntityStoreHolder.of(
            entityStore,
            fieldCaches,
            multiFieldCaches,
            columnIdentifiers
        );
    }
    
    public static CompletableFuture<GeneratedCustomerCacheHolder> reload(CompletableFuture<EntityStore<Customer>> entityStoreFuture, ExecutorService executor) {
        final CompletableFuture<FieldCache.OfInt> fieldCustomerIdCacheFuture =
            DataStoreHolderUtil.buildIntCache(entityStoreFuture, executor, Customer.CUSTOMER_ID, FieldCache.DISTINCT);
        
        final CompletableFuture<FieldCache.OfShort> fieldStoreIdCacheFuture =
            DataStoreHolderUtil.buildShortCache(entityStoreFuture, executor, Customer.STORE_ID, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldFirstNameCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, Customer.FIRST_NAME, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldLastNameCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, Customer.LAST_NAME, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldEmailCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, Customer.EMAIL, 0);
        
        final CompletableFuture<FieldCache.OfInt> fieldAddressIdCacheFuture =
            DataStoreHolderUtil.buildIntCache(entityStoreFuture, executor, Customer.ADDRESS_ID, 0);
        
        final CompletableFuture<FieldCache.OfInt> fieldActiveCacheFuture =
            DataStoreHolderUtil.buildIntCache(entityStoreFuture, executor, Customer.ACTIVE, 0);
        
        final CompletableFuture<FieldCache.OfComparable<Timestamp>> fieldCreateDateCacheFuture =
            DataStoreHolderUtil.buildComparableCache(entityStoreFuture, executor, Customer.CREATE_DATE, 0);
        
        final CompletableFuture<FieldCache.OfComparable<Timestamp>> fieldLastUpdateCacheFuture =
            DataStoreHolderUtil.buildComparableCache(entityStoreFuture, executor, Customer.LAST_UPDATE, 0);
        
        return entityStoreFuture.thenApplyAsync(entityStore -> {
            try {
                return new GeneratedCustomerCacheHolder(
                    entityStore,
                    fieldCustomerIdCacheFuture.get(),
                    fieldStoreIdCacheFuture.get(),
                    fieldFirstNameCacheFuture.get(),
                    fieldLastNameCacheFuture.get(),
                    fieldEmailCacheFuture.get(),
                    fieldAddressIdCacheFuture.get(),
                    fieldActiveCacheFuture.get(),
                    fieldCreateDateCacheFuture.get(),
                    fieldLastUpdateCacheFuture.get()
                );
            } catch (final ExecutionException | InterruptedException ex) {
                throw new RuntimeException(ex);
            }
        });
    }
    
    @Override
    public void close() {
        entityStore.close();
        fieldCustomerIdCache.close();
        fieldStoreIdCache.close();
        fieldFirstNameCache.close();
        fieldLastNameCache.close();
        fieldEmailCache.close();
        fieldAddressIdCache.close();
        fieldActiveCache.close();
        fieldCreateDateCache.close();
        fieldLastUpdateCache.close();
    }
    
    @Override
    public Map<String, Map<Statistics, ?>> getStatistics() {
        return StatisticsInternalUtil.getStatistics(    
            this,
            entityStore.identifier(),
            Customer.Identifier.CUSTOMER_ID,
            Customer.Identifier.STORE_ID,
            Customer.Identifier.FIRST_NAME,
            Customer.Identifier.LAST_NAME,
            Customer.Identifier.EMAIL,
            Customer.Identifier.ADDRESS_ID,
            Customer.Identifier.ACTIVE,
            Customer.Identifier.CREATE_DATE,
            Customer.Identifier.LAST_UPDATE
        );
    }
    
    private Map<ColumnLabel, Map<ColumnLabel, MultiFieldCache<?, ?, ?>>> createMultiCacheMap() {
        return Collections.emptyMap();
    }
}