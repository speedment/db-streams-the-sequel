package com.company.sakila.sakila.sakila.payment.generated;

import com.company.sakila.sakila.sakila.payment.Payment;
import com.company.sakila.sakila.sakila.payment.PaymentEntityStoreSerializerImpl;
import com.company.sakila.sakila.sakila.payment.PaymentManager;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.tuple.Tuple2;
import com.speedment.common.tuple.Tuples;
import com.speedment.enterprise.datastore.runtime.HasStatistics.Statistics;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStore;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreHolder;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfComparable;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfInt;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfShort;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.datastore.runtime.fieldcache.MultiFieldCache;
import com.speedment.enterprise.datastore.runtime.internal.util.StatisticsInternalUtil;
import com.speedment.enterprise.datastore.runtime.util.DataStoreHolderUtil;
import com.speedment.runtime.bulk.PersistOperation;
import com.speedment.runtime.bulk.RemoveOperation;
import com.speedment.runtime.bulk.UpdateOperation;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.ColumnLabel;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.StreamSupplierComponent;
import com.speedment.runtime.field.Field;
import com.speedment.runtime.field.trait.HasIdentifier;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.stream.Stream;

import static java.util.Objects.requireNonNull;
import static java.util.stream.Collectors.toMap;
import static java.util.stream.Collectors.toSet;

/**
 * A holder class for the various caches that are used to speed up the {@link
 * PaymentManager}.
 * 
 * Generated by
 * com.speedment.enterprise.datastore.generator.internal.code.GeneratedEntityCacheHolderTranslator
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public final class GeneratedPaymentCacheHolder implements EntityStoreHolder<Payment> {
    
    private final EntityStore<Payment> entityStore;
    private final OfInt fieldPaymentIdCache;
    private final OfInt fieldCustomerIdCache;
    private final OfShort fieldStaffIdCache;
    private final OfInt fieldRentalIdCache;
    private final OfComparable<BigDecimal> fieldAmountCache;
    private final OfComparable<Timestamp> fieldPaymentDateCache;
    private final OfComparable<Timestamp> fieldLastUpdateCache;
    
    public GeneratedPaymentCacheHolder(
            EntityStore<Payment> entityStore,
            OfInt fieldPaymentIdCache,
            OfInt fieldCustomerIdCache,
            OfShort fieldStaffIdCache,
            OfInt fieldRentalIdCache,
            OfComparable<BigDecimal> fieldAmountCache,
            OfComparable<Timestamp> fieldPaymentDateCache,
            OfComparable<Timestamp> fieldLastUpdateCache) {
        
        this.entityStore           = requireNonNull(entityStore);
        this.fieldPaymentIdCache   = requireNonNull(fieldPaymentIdCache);
        this.fieldCustomerIdCache  = requireNonNull(fieldCustomerIdCache);
        this.fieldStaffIdCache     = requireNonNull(fieldStaffIdCache);
        this.fieldRentalIdCache    = requireNonNull(fieldRentalIdCache);
        this.fieldAmountCache      = requireNonNull(fieldAmountCache);
        this.fieldPaymentDateCache = requireNonNull(fieldPaymentDateCache);
        this.fieldLastUpdateCache  = requireNonNull(fieldLastUpdateCache);
    }
    
    @Override
    public EntityStore<Payment> getEntityStore() {
        return entityStore;
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <CACHE extends FieldCache<CACHE>> CACHE getFieldCache(ColumnIdentifier<Payment> columnId) {
        if (columnId instanceof Payment.Identifier) {
            final Payment.Identifier _id = (Payment.Identifier) columnId;
            switch (_id) {
                case PAYMENT_ID   : return (CACHE) fieldPaymentIdCache;
                case CUSTOMER_ID  : return (CACHE) fieldCustomerIdCache;
                case STAFF_ID     : return (CACHE) fieldStaffIdCache;
                case RENTAL_ID    : return (CACHE) fieldRentalIdCache;
                case AMOUNT       : return (CACHE) fieldAmountCache;
                case PAYMENT_DATE : return (CACHE) fieldPaymentDateCache;
                case LAST_UPDATE  : return (CACHE) fieldLastUpdateCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = columnId.getColumnId();
            switch (_colName) {
                case "payment_id"   : return (CACHE) fieldPaymentIdCache;
                case "customer_id"  : return (CACHE) fieldCustomerIdCache;
                case "staff_id"     : return (CACHE) fieldStaffIdCache;
                case "rental_id"    : return (CACHE) fieldRentalIdCache;
                case "amount"       : return (CACHE) fieldAmountCache;
                case "payment_date" : return (CACHE) fieldPaymentDateCache;
                case "last_update"  : return (CACHE) fieldLastUpdateCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public boolean isHavingMultiFieldCache(ColumnIdentifier<Payment> columnId) {
        return false;
    }
    
    public static CompletableFuture<GeneratedPaymentCacheHolder> reload(StreamSupplierComponent streamSupplier, ExecutorService executor) {
        return reload(DataStoreHolderUtil.buildEntityStore(
            streamSupplier,
            executor,
            PaymentEntityStoreSerializerImpl::new,
            TableIdentifier.of("sakila", "sakila", "payment")
        ), executor);
    }
    
    @Override
    public EntityStoreHolder<Payment> recycleAndPersist(PersistOperation<Payment> persistOperation) {
        return wrapped().recycleAndPersist(persistOperation);
    }
    
    @Override
    public EntityStoreHolder<Payment> recycleAndRemove(RemoveOperation<Payment> removeOperation) {
        return wrapped().recycleAndRemove(removeOperation);
    }
    
    @Override
    public EntityStoreHolder<Payment> recycleAndUpdate(UpdateOperation<Payment> updateOperation) {
        return wrapped().recycleAndUpdate(updateOperation);
    }
    
    private EntityStoreHolder<Payment> wrapped() {
        // Use explicit type for Stream to improve compilation time.
        final Map<ColumnLabel, FieldCache<?>> fieldCaches = Stream.<Tuple2<HasIdentifier<Payment>, FieldCache<?>>>of(
            Tuples.of(Payment.PAYMENT_ID,  fieldPaymentIdCache),
            Tuples.of(Payment.CUSTOMER_ID, fieldCustomerIdCache),
            Tuples.of(Payment.STAFF_ID,    fieldStaffIdCache),
            Tuples.of(Payment.RENTAL_ID,   fieldRentalIdCache),
            Tuples.of(Payment.AMOUNT,      fieldAmountCache),
            Tuples.of(Payment.PAYMENT_DATE,fieldPaymentDateCache),
            Tuples.of(Payment.LAST_UPDATE, fieldLastUpdateCache)
        )
            .collect(toMap(t2 -> t2.get0().identifier().label(), Tuple2::get1));
        final Map<ColumnLabel,  Map<ColumnLabel, MultiFieldCache<?, ?, ?>>>  multiFieldCaches = createMultiCacheMap();
        final Set<ColumnIdentifier<Payment>> columnIdentifiers = Stream.<HasIdentifier<Payment>>of(
            Payment.PAYMENT_ID,
            Payment.CUSTOMER_ID,
            Payment.STAFF_ID,
            Payment.RENTAL_ID,
            Payment.AMOUNT,
            Payment.PAYMENT_DATE,
            Payment.LAST_UPDATE
        )
            .map(HasIdentifier::identifier)
            .collect(toSet());
        return EntityStoreHolder.of(
            entityStore,
            fieldCaches,
            multiFieldCaches,
            columnIdentifiers
        );
    }
    
    public static CompletableFuture<GeneratedPaymentCacheHolder> reload(CompletableFuture<EntityStore<Payment>> entityStoreFuture, ExecutorService executor) {
        final CompletableFuture<FieldCache.OfInt> fieldPaymentIdCacheFuture =
            DataStoreHolderUtil.buildIntCache(entityStoreFuture, executor, Payment.PAYMENT_ID, FieldCache.DISTINCT);
        
        final CompletableFuture<FieldCache.OfInt> fieldCustomerIdCacheFuture =
            DataStoreHolderUtil.buildIntCache(entityStoreFuture, executor, Payment.CUSTOMER_ID, 0);
        
        final CompletableFuture<FieldCache.OfShort> fieldStaffIdCacheFuture =
            DataStoreHolderUtil.buildShortCache(entityStoreFuture, executor, Payment.STAFF_ID, 0);
        
        final CompletableFuture<FieldCache.OfInt> fieldRentalIdCacheFuture =
            DataStoreHolderUtil.buildIntCache(entityStoreFuture, executor, Payment.RENTAL_ID, 0);
        
        final CompletableFuture<FieldCache.OfComparable<BigDecimal>> fieldAmountCacheFuture =
            DataStoreHolderUtil.buildComparableCache(entityStoreFuture, executor, Payment.AMOUNT, 0);
        
        final CompletableFuture<FieldCache.OfComparable<Timestamp>> fieldPaymentDateCacheFuture =
            DataStoreHolderUtil.buildComparableCache(entityStoreFuture, executor, Payment.PAYMENT_DATE, 0);
        
        final CompletableFuture<FieldCache.OfComparable<Timestamp>> fieldLastUpdateCacheFuture =
            DataStoreHolderUtil.buildComparableCache(entityStoreFuture, executor, Payment.LAST_UPDATE, 0);
        
        return entityStoreFuture.thenApplyAsync(entityStore -> {
            try {
                return new GeneratedPaymentCacheHolder(
                    entityStore,
                    fieldPaymentIdCacheFuture.get(),
                    fieldCustomerIdCacheFuture.get(),
                    fieldStaffIdCacheFuture.get(),
                    fieldRentalIdCacheFuture.get(),
                    fieldAmountCacheFuture.get(),
                    fieldPaymentDateCacheFuture.get(),
                    fieldLastUpdateCacheFuture.get()
                );
            } catch (final ExecutionException | InterruptedException ex) {
                throw new RuntimeException(ex);
            }
        });
    }
    
    @Override
    public void close() {
        entityStore.close();
        fieldPaymentIdCache.close();
        fieldCustomerIdCache.close();
        fieldStaffIdCache.close();
        fieldRentalIdCache.close();
        fieldAmountCache.close();
        fieldPaymentDateCache.close();
        fieldLastUpdateCache.close();
    }
    
    @Override
    public Map<String, Map<Statistics, ?>> getStatistics() {
        return StatisticsInternalUtil.getStatistics(    
            this,
            entityStore.identifier(),
            Payment.Identifier.PAYMENT_ID,
            Payment.Identifier.CUSTOMER_ID,
            Payment.Identifier.STAFF_ID,
            Payment.Identifier.RENTAL_ID,
            Payment.Identifier.AMOUNT,
            Payment.Identifier.PAYMENT_DATE,
            Payment.Identifier.LAST_UPDATE
        );
    }
    
    private Map<ColumnLabel, Map<ColumnLabel, MultiFieldCache<?, ?, ?>>> createMultiCacheMap() {
        return Collections.emptyMap();
    }
}