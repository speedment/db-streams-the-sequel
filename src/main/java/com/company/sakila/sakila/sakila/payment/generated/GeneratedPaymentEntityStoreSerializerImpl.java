package com.company.sakila.sakila.sakila.payment.generated;

import com.company.sakila.sakila.sakila.customer.Customer;
import com.company.sakila.sakila.sakila.payment.Payment;
import com.company.sakila.sakila.sakila.payment.PaymentImpl;
import com.company.sakila.sakila.sakila.rental.Rental;
import com.company.sakila.sakila.sakila.staff.Staff;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.function.BiLongToIntFunction;
import com.speedment.common.function.LongToBooleanFunction;
import com.speedment.common.function.LongToByteFunction;
import com.speedment.common.function.LongToCharFunction;
import com.speedment.common.function.LongToFloatFunction;
import com.speedment.common.function.LongToShortFunction;
import com.speedment.enterprise.common.bytebuffercommon.ByteBufferUtil;
import com.speedment.enterprise.datastore.runtime.DataStoreHolder;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreSerializer;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStoreComparator;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStoreCompareTo;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStorePredicate;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.datastore.runtime.util.BigDecimalUtil;
import com.speedment.enterprise.datastore.runtime.util.SerializerUtil;
import com.speedment.runtime.config.identifier.ColumnIdentifier;

import java.math.BigDecimal;
import java.nio.ByteBuffer;
import java.sql.Timestamp;
import java.util.List;
import java.util.function.BiConsumer;
import java.util.function.LongConsumer;
import java.util.function.LongFunction;
import java.util.function.LongPredicate;
import java.util.function.LongToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongUnaryOperator;

import static java.util.Collections.singletonList;
import static java.util.Objects.requireNonNull;
import static java.util.stream.Collectors.joining;

/**
 * Serializes and deserializes instances of Payment.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedPaymentEntityStoreSerializerImpl implements EntityStoreSerializer<Payment> {
    
    private final LongFunction<ByteBuffer> bufferFinder;
    private final LongToIntFunction offsetFinder;
    private final static int FIELD_STAFF_ID = 0;
    private final static int FIELD_PAYMENT_ID = 2;
    private final static int FIELD_CUSTOMER_ID = 6;
    private final static int FIELD_PAYMENT_DATE = 10;
    private final static int FIELD_LAST_UPDATE = 18;
    private final static int FKREF_FK_PAYMENT_CUSTOMER = 26;
    private final static int FKREF_FK_PAYMENT_STAFF = 34;
    private final static int ENDPOS_RENTAL_ID = 42;
    private final static int FKREF_ENDPOS_FK_PAYMENT_RENTAL = 43;
    private final static int ENDPOS_AMOUNT = 44;
    private final static int VARSIZE_BEGINS = 48;
    
    protected GeneratedPaymentEntityStoreSerializerImpl(final LongFunction<ByteBuffer> bufferFinder, final LongToIntFunction offsetFinder) {
        this.bufferFinder = requireNonNull(bufferFinder);
        this.offsetFinder = requireNonNull(offsetFinder);
    }
    
    @Override
    public BiConsumer<ByteBuffer, Payment> serializer() {
        return (buffer, entity) -> {
            int varSizePos = 0;
            buffer.putShort(FIELD_STAFF_ID, entity.getStaffId());
            buffer.putInt(FIELD_PAYMENT_ID, entity.getPaymentId());
            buffer.putInt(FIELD_CUSTOMER_ID, entity.getCustomerId());
            buffer.putLong(FIELD_PAYMENT_DATE, entity.getPaymentDate().getTime());
            buffer.putLong(FIELD_LAST_UPDATE, entity.getLastUpdate().getTime());
            buffer.putLong(FKREF_FK_PAYMENT_CUSTOMER, -1L); // Will be set later on in the decorator()-method.
            buffer.putLong(FKREF_FK_PAYMENT_STAFF, -1L); // Will be set later on in the decorator()-method.
            if (entity.getRentalId().isPresent()) {
                buffer.putInt(VARSIZE_BEGINS + varSizePos, entity.getRentalId().getAsInt());
                varSizePos += Integer.BYTES;
                buffer.put(ENDPOS_RENTAL_ID, (byte) varSizePos);
            } else {
                buffer.put(ENDPOS_RENTAL_ID, (byte) (0x80 | varSizePos));
            }
            if (entity.getRentalId().isPresent()) {
                // The actual reference is set later in the decorator()-method.
                varSizePos += Long.BYTES;
                buffer.put(FKREF_ENDPOS_FK_PAYMENT_RENTAL, (byte) varSizePos);
            } else {
                buffer.put(FKREF_ENDPOS_FK_PAYMENT_RENTAL, (byte) (0b10000000 | varSizePos));
            }
            varSizePos += BigDecimalUtil.serialize(
                entity.getAmount(),
                buffer,
                VARSIZE_BEGINS + varSizePos
            );
            buffer.putInt(ENDPOS_AMOUNT, varSizePos);
            buffer.position(0);
            buffer.limit(VARSIZE_BEGINS + varSizePos);
        };
    }
    
    @Override
    public LongConsumer decorator(DataStoreHolder holder) {
        final FieldCache.OfInt customer_customerIdFieldCache = holder.getFieldCache(Customer.CUSTOMER_ID.identifier());
        final FieldCache.OfInt rental_rentalIdFieldCache = holder.getFieldCache(Rental.RENTAL_ID.identifier());
        final FieldCache.OfShort staff_staffIdFieldCache = holder.getFieldCache(Staff.STAFF_ID.identifier());
        final LongToIntFunction customerIdDeserializer = intDeserializer(Payment.CUSTOMER_ID.identifier());
        final LongPredicate rentalIdIsPresent = isPresent(Payment.RENTAL_ID.identifier());
        final LongToIntFunction rentalIdDeserializer = intDeserializer(Payment.RENTAL_ID.identifier());
        final LongToShortFunction staffIdDeserializer = shortDeserializer(Payment.STAFF_ID.identifier());
        final LongUnaryOperator fkPaymentCustomerResolver = ref -> {
            final int value = customerIdDeserializer.applyAsInt(ref);
            return customer_customerIdFieldCache.any(value);
        };
        final LongUnaryOperator fkPaymentRentalResolver = ref -> {
            if (rentalIdIsPresent.test(ref)) {
                final int value = rentalIdDeserializer.applyAsInt(ref);
                return rental_rentalIdFieldCache.any(value);
            } else {
                return -1;
            }
        };
        final LongUnaryOperator fkPaymentStaffResolver = ref -> {
            final short value = staffIdDeserializer.applyAsShort(ref);
            return staff_staffIdFieldCache.any(value);
        };
        return ref -> {
            final ByteBuffer buffer = bufferFinder.apply(ref);
            final int rowOffset = offsetFinder.applyAsInt(ref);
            final int fkPaymentRentalEndPos = buffer.get(rowOffset + FKREF_ENDPOS_FK_PAYMENT_RENTAL);
            buffer.putLong(rowOffset + FKREF_FK_PAYMENT_CUSTOMER, fkPaymentCustomerResolver.applyAsLong(ref));
            buffer.putLong(rowOffset + FKREF_FK_PAYMENT_STAFF, fkPaymentStaffResolver.applyAsLong(ref));
            if (fkPaymentRentalEndPos >= 0) {
                buffer.putLong(rowOffset + VARSIZE_BEGINS + fkPaymentRentalEndPos - Long.BYTES, fkPaymentRentalResolver.applyAsLong(ref));
            }
        };
    }
    
    @Override
    public LongFunction<Payment> deserializer() {
        return ref -> {
            final ByteBuffer buffer = bufferFinder.apply(ref);
            final int offset = offsetFinder.applyAsInt(ref);
            final Payment entity = new PaymentImpl();
            entity.setPaymentId(buffer.getInt(offset + FIELD_PAYMENT_ID));
            entity.setCustomerId(buffer.getInt(offset + FIELD_CUSTOMER_ID));
            entity.setStaffId(buffer.getShort(offset + FIELD_STAFF_ID));
            if (buffer.get(offset + ENDPOS_RENTAL_ID) >= 0) {
                entity.setRentalId(buffer.getInt(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_RENTAL_ID) - Integer.BYTES));
            }
            entity.setAmount(BigDecimalUtil.deserializeBigDecimal(buffer,
                offset + VARSIZE_BEGINS + (0x7f & buffer.get(offset + ENDPOS_AMOUNT - Byte.BYTES)),
                offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_AMOUNT)
            ));
            entity.setPaymentDate(new Timestamp(buffer.getLong(offset + FIELD_PAYMENT_DATE)));
            entity.setLastUpdate(new Timestamp(buffer.getLong(offset + FIELD_LAST_UPDATE)));
            return entity;
        };
    }
    
    @Override
    public Class<?> deserializedType(final ColumnIdentifier<Payment> colId) {
        if (colId instanceof Payment.Identifier) {
            final Payment.Identifier _id = (Payment.Identifier) colId;
            switch (_id) {
                case STAFF_ID     : return short.class;
                case PAYMENT_ID   : 
                case CUSTOMER_ID  : return int.class;
                case PAYMENT_DATE : 
                case LAST_UPDATE  : return Timestamp.class;
                case RENTAL_ID    : return int.class;
                case AMOUNT       : return BigDecimal.class;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "staff_id"     : return short.class;
                case "payment_id"   : 
                case "customer_id"  : return int.class;
                case "payment_date" : 
                case "last_update"  : return Timestamp.class;
                case "rental_id"    : return int.class;
                case "amount"       : return BigDecimal.class;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public <FK_ENTITY> LongUnaryOperator finder(final ColumnIdentifier<Payment> colId, final ColumnIdentifier<FK_ENTITY> fkColId) {
        return finder(singletonList(colId), singletonList(fkColId));
    }
    
    @Override
    public <FK_ENTITY> LongUnaryOperator finder(final List<ColumnIdentifier<Payment>> cols, final List<ColumnIdentifier<FK_ENTITY>> fkCols) {
        final String fkName = SerializerUtil.uniqueFkName(cols, fkCols);
        switch (fkName) {
            case "{customer_id}->customer{customer_id}": return finder("fk_payment_customer");
            case "{rental_id}->rental{rental_id}": return finder("fk_payment_rental");
            case "{staff_id}->staff{staff_id}": return finder("fk_payment_staff");
        }
        
        throw new IllegalArgumentException(
            fkName + " is not a valid foreign reference name."
        );
    }
    
    @Override
    public LongUnaryOperator finder(final String fkName) {
        switch (fkName) {
            case "fk_payment_customer": return ref -> bufferFinder.apply(ref).getLong(offsetFinder.applyAsInt(ref) + FKREF_FK_PAYMENT_CUSTOMER);
            case "fk_payment_rental": return ref -> {
                final ByteBuffer buffer = bufferFinder.apply(ref);
                final int rowOffset = offsetFinder.applyAsInt(ref);
                final int endPos = buffer.get(rowOffset + FKREF_ENDPOS_FK_PAYMENT_RENTAL);
                if (endPos < 0) return -1L; // No foreign reference found
                else return buffer.getLong(rowOffset + VARSIZE_BEGINS + endPos - 8);
            };
            case "fk_payment_staff": return ref -> bufferFinder.apply(ref).getLong(offsetFinder.applyAsInt(ref) + FKREF_FK_PAYMENT_STAFF);
        }
        
        throw new IllegalArgumentException(
            "Could not find a foreign key " + fkName + " in table 'payment'."
        );
    }
    
    @Override
    public LongPredicate isNull(final ColumnIdentifier<Payment> colId) {
        if (colId instanceof Payment.Identifier) {
            final Payment.Identifier _id = (Payment.Identifier) colId;
            switch (_id) {
                case STAFF_ID     : 
                case PAYMENT_ID   : 
                case CUSTOMER_ID  : 
                case PAYMENT_DATE : 
                case LAST_UPDATE  : return ALWAYS_FALSE;
                case RENTAL_ID    : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_RENTAL_ID) < 0;
                case AMOUNT       : return ALWAYS_FALSE;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "staff_id"     : 
                case "payment_id"   : 
                case "customer_id"  : 
                case "payment_date" : 
                case "last_update"  : return ALWAYS_FALSE;
                case "rental_id"    : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_RENTAL_ID) < 0;
                case "amount"       : return ALWAYS_FALSE;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongPredicate isPresent(final ColumnIdentifier<Payment> colId) {
        if (colId instanceof Payment.Identifier) {
            final Payment.Identifier _id = (Payment.Identifier) colId;
            switch (_id) {
                case STAFF_ID     : 
                case PAYMENT_ID   : 
                case CUSTOMER_ID  : 
                case PAYMENT_DATE : 
                case LAST_UPDATE  : return ALWAYS_TRUE;
                case RENTAL_ID    : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_RENTAL_ID) >= 0;
                case AMOUNT       : return ALWAYS_TRUE;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "staff_id"     : 
                case "payment_id"   : 
                case "customer_id"  : 
                case "payment_date" : 
                case "last_update"  : return ALWAYS_TRUE;
                case "rental_id"    : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_RENTAL_ID) >= 0;
                case "amount"       : return ALWAYS_TRUE;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToByteFunction byteDeserializer(final ColumnIdentifier<Payment> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type byte.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToShortFunction shortDeserializer(final ColumnIdentifier<Payment> colId) {
        if ("staff_id".equals(colId.getColumnId())) {
            return ref -> bufferFinder.apply(ref).getShort(offsetFinder.applyAsInt(ref) + FIELD_STAFF_ID);
        }
        
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type short.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction intDeserializer(final ColumnIdentifier<Payment> colId) {
        if (colId instanceof Payment.Identifier) {
            final Payment.Identifier _id = (Payment.Identifier) colId;
            switch (_id) {
                case PAYMENT_ID  : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_PAYMENT_ID);
                case CUSTOMER_ID : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_CUSTOMER_ID);
                case RENTAL_ID   : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.getInt(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_RENTAL_ID) - Integer.BYTES);
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type int.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "payment_id"  : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_PAYMENT_ID);
                case "customer_id" : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_CUSTOMER_ID);
                case "rental_id"   : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.getInt(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_RENTAL_ID) - Integer.BYTES);
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type int.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongUnaryOperator longDeserializer(final ColumnIdentifier<Payment> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type long.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToFloatFunction floatDeserializer(final ColumnIdentifier<Payment> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type float.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToDoubleFunction doubleDeserializer(final ColumnIdentifier<Payment> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type double.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToCharFunction charDeserializer(final ColumnIdentifier<Payment> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type char.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToBooleanFunction booleanDeserializer(final ColumnIdentifier<Payment> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type boolean.", colId.getColumnId())
        );
    }
    
    @Override
    public LongFunction<?> objectDeserializer(final ColumnIdentifier<Payment> colId) {
        if (colId instanceof Payment.Identifier) {
            final Payment.Identifier _id = (Payment.Identifier) colId;
            switch (_id) {
                case PAYMENT_DATE : return ref -> new Timestamp(bufferFinder.apply(ref).getLong(offsetFinder.applyAsInt(ref) + FIELD_PAYMENT_DATE));
                case LAST_UPDATE  : return ref -> new Timestamp(bufferFinder.apply(ref).getLong(offsetFinder.applyAsInt(ref) + FIELD_LAST_UPDATE));
                case AMOUNT       : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    final int starts = offset + VARSIZE_BEGINS + (0x7f & buffer.get(offset + ENDPOS_AMOUNT - Byte.BYTES));
                    final int ends   = offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_AMOUNT);
                    return BigDecimalUtil.deserializeBigDecimal(buffer, starts, ends);
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "payment_date" : return ref -> new Timestamp(bufferFinder.apply(ref).getLong(offsetFinder.applyAsInt(ref) + FIELD_PAYMENT_DATE));
                case "last_update"  : return ref -> new Timestamp(bufferFinder.apply(ref).getLong(offsetFinder.applyAsInt(ref) + FIELD_LAST_UPDATE));
                case "amount"       : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    final int starts = offset + VARSIZE_BEGINS + (0x7f & buffer.get(offset + ENDPOS_AMOUNT - Byte.BYTES));
                    final int ends   = offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_AMOUNT);
                    return BigDecimalUtil.deserializeBigDecimal(buffer, starts, ends);
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public BiLongToIntFunction comparator(final ColumnIdentifier<Payment> colId) {
        if (colId instanceof Payment.Identifier) {
            final Payment.Identifier _id = (Payment.Identifier) colId;
            switch (_id) {
                case STAFF_ID     : return (aRef, bRef) -> Short.compare(
                    bufferFinder.apply(aRef).getShort(offsetFinder.applyAsInt(aRef) + FIELD_STAFF_ID),
                    bufferFinder.apply(bRef).getShort(offsetFinder.applyAsInt(bRef) + FIELD_STAFF_ID)
                );
                case PAYMENT_ID   : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_PAYMENT_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_PAYMENT_ID)
                );
                case CUSTOMER_ID  : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_CUSTOMER_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_CUSTOMER_ID)
                );
                case PAYMENT_DATE : return (aRef, bRef) -> Long.compare(
                    bufferFinder.apply(aRef).getLong(offsetFinder.applyAsInt(aRef) + FIELD_PAYMENT_DATE),
                    bufferFinder.apply(bRef).getLong(offsetFinder.applyAsInt(bRef) + FIELD_PAYMENT_DATE)
                );
                case LAST_UPDATE  : return (aRef, bRef) -> Long.compare(
                    bufferFinder.apply(aRef).getLong(offsetFinder.applyAsInt(aRef) + FIELD_LAST_UPDATE),
                    bufferFinder.apply(bRef).getLong(offsetFinder.applyAsInt(bRef) + FIELD_LAST_UPDATE)
                );
                case RENTAL_ID    : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Integer.compare(
                        aBuf.getInt(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_RENTAL_ID) - Integer.BYTES),
                        bBuf.getInt(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_RENTAL_ID) - Integer.BYTES)
                    );
                };
                case AMOUNT       : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7f & aBuf.get(aOffset + ENDPOS_AMOUNT - Byte.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7f & bBuf.get(bOffset + ENDPOS_AMOUNT - Byte.BYTES));
                    final int aEnds = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_AMOUNT);
                    final int bEnds = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_AMOUNT);
                    return BigDecimalUtil.compare(
                        aBuf, aStarts, aEnds, 
                        bBuf, bStarts, bEnds
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "staff_id"     : return (aRef, bRef) -> Short.compare(
                    bufferFinder.apply(aRef).getShort(offsetFinder.applyAsInt(aRef) + FIELD_STAFF_ID),
                    bufferFinder.apply(bRef).getShort(offsetFinder.applyAsInt(bRef) + FIELD_STAFF_ID)
                );
                case "payment_id"   : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_PAYMENT_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_PAYMENT_ID)
                );
                case "customer_id"  : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_CUSTOMER_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_CUSTOMER_ID)
                );
                case "payment_date" : return (aRef, bRef) -> Long.compare(
                    bufferFinder.apply(aRef).getLong(offsetFinder.applyAsInt(aRef) + FIELD_PAYMENT_DATE),
                    bufferFinder.apply(bRef).getLong(offsetFinder.applyAsInt(bRef) + FIELD_PAYMENT_DATE)
                );
                case "last_update"  : return (aRef, bRef) -> Long.compare(
                    bufferFinder.apply(aRef).getLong(offsetFinder.applyAsInt(aRef) + FIELD_LAST_UPDATE),
                    bufferFinder.apply(bRef).getLong(offsetFinder.applyAsInt(bRef) + FIELD_LAST_UPDATE)
                );
                case "rental_id"    : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Integer.compare(
                        aBuf.getInt(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_RENTAL_ID) - Integer.BYTES),
                        bBuf.getInt(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_RENTAL_ID) - Integer.BYTES)
                    );
                };
                case "amount"       : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7f & aBuf.get(aOffset + ENDPOS_AMOUNT - Byte.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7f & bBuf.get(bOffset + ENDPOS_AMOUNT - Byte.BYTES));
                    final int aEnds = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_AMOUNT);
                    final int bEnds = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_AMOUNT);
                    return BigDecimalUtil.compare(
                        aBuf, aStarts, aEnds, 
                        bBuf, bStarts, bEnds
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public BiLongToIntFunction comparatorNullsLast(final ColumnIdentifier<Payment> colId) {
        if (colId instanceof Payment.Identifier) {
            final Payment.Identifier _id = (Payment.Identifier) colId;
            switch (_id) {
                case STAFF_ID     : return (aRef, bRef) -> Short.compare(
                    bufferFinder.apply(aRef).getShort(offsetFinder.applyAsInt(aRef) + FIELD_STAFF_ID),
                    bufferFinder.apply(bRef).getShort(offsetFinder.applyAsInt(bRef) + FIELD_STAFF_ID)
                );
                case PAYMENT_ID   : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_PAYMENT_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_PAYMENT_ID)
                );
                case CUSTOMER_ID  : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_CUSTOMER_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_CUSTOMER_ID)
                );
                case PAYMENT_DATE : return (aRef, bRef) -> Long.compare(
                    bufferFinder.apply(aRef).getLong(offsetFinder.applyAsInt(aRef) + FIELD_PAYMENT_DATE),
                    bufferFinder.apply(bRef).getLong(offsetFinder.applyAsInt(bRef) + FIELD_PAYMENT_DATE)
                );
                case LAST_UPDATE  : return (aRef, bRef) -> Long.compare(
                    bufferFinder.apply(aRef).getLong(offsetFinder.applyAsInt(aRef) + FIELD_LAST_UPDATE),
                    bufferFinder.apply(bRef).getLong(offsetFinder.applyAsInt(bRef) + FIELD_LAST_UPDATE)
                );
                case RENTAL_ID    : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_RENTAL_ID);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_RENTAL_ID);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Integer.compare(
                        aBuf.getInt(aOffset + VARSIZE_BEGINS + aEndPos - Integer.BYTES),
                        bBuf.getInt(bOffset + VARSIZE_BEGINS + bEndPos - Integer.BYTES)
                    );
                };
                case AMOUNT       : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7f & aBuf.get(aOffset + ENDPOS_AMOUNT - Byte.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7f & bBuf.get(bOffset + ENDPOS_AMOUNT - Byte.BYTES));
                    final int aEnds = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_AMOUNT);
                    final int bEnds = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_AMOUNT);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return BigDecimalUtil.compare(
                        aBuf, aStarts, aEnds, 
                        bBuf, bStarts, bEnds
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "staff_id"     : return (aRef, bRef) -> Short.compare(
                    bufferFinder.apply(aRef).getShort(offsetFinder.applyAsInt(aRef) + FIELD_STAFF_ID),
                    bufferFinder.apply(bRef).getShort(offsetFinder.applyAsInt(bRef) + FIELD_STAFF_ID)
                );
                case "payment_id"   : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_PAYMENT_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_PAYMENT_ID)
                );
                case "customer_id"  : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_CUSTOMER_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_CUSTOMER_ID)
                );
                case "payment_date" : return (aRef, bRef) -> Long.compare(
                    bufferFinder.apply(aRef).getLong(offsetFinder.applyAsInt(aRef) + FIELD_PAYMENT_DATE),
                    bufferFinder.apply(bRef).getLong(offsetFinder.applyAsInt(bRef) + FIELD_PAYMENT_DATE)
                );
                case "last_update"  : return (aRef, bRef) -> Long.compare(
                    bufferFinder.apply(aRef).getLong(offsetFinder.applyAsInt(aRef) + FIELD_LAST_UPDATE),
                    bufferFinder.apply(bRef).getLong(offsetFinder.applyAsInt(bRef) + FIELD_LAST_UPDATE)
                );
                case "rental_id"    : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_RENTAL_ID);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_RENTAL_ID);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Integer.compare(
                        aBuf.getInt(aOffset + VARSIZE_BEGINS + aEndPos - Integer.BYTES),
                        bBuf.getInt(bOffset + VARSIZE_BEGINS + bEndPos - Integer.BYTES)
                    );
                };
                case "amount"       : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7f & aBuf.get(aOffset + ENDPOS_AMOUNT - Byte.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7f & bBuf.get(bOffset + ENDPOS_AMOUNT - Byte.BYTES));
                    final int aEnds = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_AMOUNT);
                    final int bEnds = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_AMOUNT);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return BigDecimalUtil.compare(
                        aBuf, aStarts, aEnds, 
                        bBuf, bStarts, bEnds
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction compareToByte(final ColumnIdentifier<Payment> colId, final byte value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type byte.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToShort(final ColumnIdentifier<Payment> colId, final short value) {
        if ("staff_id".equals(colId.getColumnId())) {
            {
                final short operand = value;
                return ref -> Short.compare(
                    bufferFinder.apply(ref).getShort(offsetFinder.applyAsInt(ref) + FIELD_STAFF_ID),
                    operand
                );
            }
        }
        
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type short.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToInt(final ColumnIdentifier<Payment> colId, final int value) {
        if (colId instanceof Payment.Identifier) {
            final Payment.Identifier _id = (Payment.Identifier) colId;
            switch (_id) {
                case PAYMENT_ID  : {
                    final int operand = value;
                    return ref -> Integer.compare(
                        bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_PAYMENT_ID),
                        operand
                    );
                }
                case CUSTOMER_ID : {
                    final int operand = value;
                    return ref -> Integer.compare(
                        bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_CUSTOMER_ID),
                        operand
                    );
                }
                case RENTAL_ID   : {
                    final int operand = value;
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        final int endPos = buffer.get(offset + ENDPOS_RENTAL_ID);
                        if (endPos < 0) return 1;
                        else return Integer.compare(
                            buffer.getInt(offset + VARSIZE_BEGINS + endPos - Integer.BYTES),
                            operand
                        );
                    };
                }
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type int.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "payment_id"  : {
                    final int operand = value;
                    return ref -> Integer.compare(
                        bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_PAYMENT_ID),
                        operand
                    );
                }
                case "customer_id" : {
                    final int operand = value;
                    return ref -> Integer.compare(
                        bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_CUSTOMER_ID),
                        operand
                    );
                }
                case "rental_id"   : {
                    final int operand = value;
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        final int endPos = buffer.get(offset + ENDPOS_RENTAL_ID);
                        if (endPos < 0) return 1;
                        else return Integer.compare(
                            buffer.getInt(offset + VARSIZE_BEGINS + endPos - Integer.BYTES),
                            operand
                        );
                    };
                }
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type int.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction compareToLong(final ColumnIdentifier<Payment> colId, final long value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type long.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToFloat(final ColumnIdentifier<Payment> colId, final float value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type float.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToDouble(final ColumnIdentifier<Payment> colId, final double value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type double.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToBoolean(final ColumnIdentifier<Payment> colId, final boolean value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type boolean.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToChar(final ColumnIdentifier<Payment> colId, final char value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type char.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToObject(final ColumnIdentifier<Payment> colId, final Object value) {
        if (colId instanceof Payment.Identifier) {
            final Payment.Identifier _id = (Payment.Identifier) colId;
            switch (_id) {
                case PAYMENT_DATE : {
                    final long operand = ((Timestamp) value).getTime();
                    return ref -> Long.compare(
                        bufferFinder.apply(ref).getLong(offsetFinder.applyAsInt(ref) + FIELD_PAYMENT_DATE),
                        operand
                    );
                }
                case LAST_UPDATE  : {
                    final long operand = ((Timestamp) value).getTime();
                    return ref -> Long.compare(
                        bufferFinder.apply(ref).getLong(offsetFinder.applyAsInt(ref) + FIELD_LAST_UPDATE),
                        operand
                    );
                }
                case AMOUNT       : {
                    final BigDecimal casted = (BigDecimal) value;
                    final int sign = casted.signum();
                    if (sign == 0) {
                        return ref -> {
                            final ByteBuffer buffer = bufferFinder.apply(ref);
                            final int offset = offsetFinder.applyAsInt(ref);
                            final int startPos = (0x7f & buffer.get(offset + ENDPOS_AMOUNT - Byte.BYTES));
                            final int endPos = buffer.getInt(offset + ENDPOS_AMOUNT);
                            if (startPos + 4 == endPos) return 0;
                            else if ((buffer.get(offset + VARSIZE_BEGINS + startPos + 4) & 0x80) == 0) {
                                return 1; // Greater than 0
                            } else return -1; // Less than 0
                        };
                    }
                    final int scale = casted.scale();
                    final byte[] bytes = BigDecimalUtil.asByteArray(casted);
                    final ByteBuffer wrapped = ByteBuffer.allocate(4 + bytes.length);
                    wrapped.putInt(scale);
                    wrapped.put(bytes);
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        int starts = offset + VARSIZE_BEGINS + (0x7f & buffer.get(offset + ENDPOS_AMOUNT - Byte.BYTES));
                        int ends = offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_AMOUNT);
                        return BigDecimalUtil.compare(
                            buffer, starts, ends,
                            wrapped, 0, wrapped.capacity()
                        );
                    };
                }
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type object.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "payment_date" : {
                    final long operand = ((Timestamp) value).getTime();
                    return ref -> Long.compare(
                        bufferFinder.apply(ref).getLong(offsetFinder.applyAsInt(ref) + FIELD_PAYMENT_DATE),
                        operand
                    );
                }
                case "last_update"  : {
                    final long operand = ((Timestamp) value).getTime();
                    return ref -> Long.compare(
                        bufferFinder.apply(ref).getLong(offsetFinder.applyAsInt(ref) + FIELD_LAST_UPDATE),
                        operand
                    );
                }
                case "amount"       : {
                    final BigDecimal casted = (BigDecimal) value;
                    final int sign = casted.signum();
                    if (sign == 0) {
                        return ref -> {
                            final ByteBuffer buffer = bufferFinder.apply(ref);
                            final int offset = offsetFinder.applyAsInt(ref);
                            final int startPos = (0x7f & buffer.get(offset + ENDPOS_AMOUNT - Byte.BYTES));
                            final int endPos = buffer.getInt(offset + ENDPOS_AMOUNT);
                            if (startPos + 4 == endPos) return 0;
                            else if ((buffer.get(offset + VARSIZE_BEGINS + startPos + 4) & 0x80) == 0) {
                                return 1; // Greater than 0
                            } else return -1; // Less than 0
                        };
                    }
                    final int scale = casted.scale();
                    final byte[] bytes = BigDecimalUtil.asByteArray(casted);
                    final ByteBuffer wrapped = ByteBuffer.allocate(4 + bytes.length);
                    wrapped.putInt(scale);
                    wrapped.put(bytes);
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        int starts = offset + VARSIZE_BEGINS + (0x7f & buffer.get(offset + ENDPOS_AMOUNT - Byte.BYTES));
                        int ends = offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_AMOUNT);
                        return BigDecimalUtil.compare(
                            buffer, starts, ends,
                            wrapped, 0, wrapped.capacity()
                        );
                    };
                }
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type object.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction compareToNull(final ColumnIdentifier<Payment> colId) {
        if (colId instanceof Payment.Identifier) {
            final Payment.Identifier _id = (Payment.Identifier) colId;
            switch (_id) {
                case STAFF_ID     : 
                case PAYMENT_ID   : 
                case CUSTOMER_ID  : 
                case PAYMENT_DATE : 
                case LAST_UPDATE  : return ALWAYS_LESS;
                case RENTAL_ID    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_RENTAL_ID) < 0 ? 0 : -1;
                };
                case AMOUNT       : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_AMOUNT) < 0 ? 0 : -1;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "staff_id"     : 
                case "payment_id"   : 
                case "customer_id"  : 
                case "payment_date" : 
                case "last_update"  : return ALWAYS_LESS;
                case "rental_id"    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_RENTAL_ID) < 0 ? 0 : -1;
                };
                case "amount"       : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_AMOUNT) < 0 ? 0 : -1;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongPredicate newPredicate(final ColumnIdentifier<Payment> colId, final EntityStorePredicate predicate) {
        if (colId instanceof Payment.Identifier) {
            final Payment.Identifier _id = (Payment.Identifier) colId;
            switch (_id) {
                case STAFF_ID     : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_STAFF_ID;
                    return predicate.test(buffer, begins, begins + Short.BYTES);
                };
                case PAYMENT_ID   : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_PAYMENT_ID;
                    return predicate.test(buffer, begins, begins + Integer.BYTES);
                };
                case CUSTOMER_ID  : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_CUSTOMER_ID;
                    return predicate.test(buffer, begins, begins + Integer.BYTES);
                };
                case PAYMENT_DATE : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_PAYMENT_DATE;
                    return predicate.test(buffer, begins, begins + 8);
                };
                case LAST_UPDATE  : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_LAST_UPDATE;
                    return predicate.test(buffer, begins, begins + 8);
                };
                case RENTAL_ID    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_RENTAL_ID)
                    );
                };
                case AMOUNT       : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_AMOUNT - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_AMOUNT)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "staff_id"     : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_STAFF_ID;
                    return predicate.test(buffer, begins, begins + Short.BYTES);
                };
                case "payment_id"   : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_PAYMENT_ID;
                    return predicate.test(buffer, begins, begins + Integer.BYTES);
                };
                case "customer_id"  : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_CUSTOMER_ID;
                    return predicate.test(buffer, begins, begins + Integer.BYTES);
                };
                case "payment_date" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_PAYMENT_DATE;
                    return predicate.test(buffer, begins, begins + 8);
                };
                case "last_update"  : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_LAST_UPDATE;
                    return predicate.test(buffer, begins, begins + 8);
                };
                case "rental_id"    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_RENTAL_ID)
                    );
                };
                case "amount"       : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_AMOUNT - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_AMOUNT)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction newCompareTo(final ColumnIdentifier<Payment> colId, final EntityStoreCompareTo compareTo) {
        if (colId instanceof Payment.Identifier) {
            final Payment.Identifier _id = (Payment.Identifier) colId;
            switch (_id) {
                case STAFF_ID     : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_STAFF_ID;
                    return compareTo.compare(buffer, begins, begins + Short.BYTES);
                };
                case PAYMENT_ID   : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_PAYMENT_ID;
                    return compareTo.compare(buffer, begins, begins + Integer.BYTES);
                };
                case CUSTOMER_ID  : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_CUSTOMER_ID;
                    return compareTo.compare(buffer, begins, begins + Integer.BYTES);
                };
                case PAYMENT_DATE : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_PAYMENT_DATE;
                    return compareTo.compare(buffer, begins, begins + 8);
                };
                case LAST_UPDATE  : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_LAST_UPDATE;
                    return compareTo.compare(buffer, begins, begins + 8);
                };
                case RENTAL_ID    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_RENTAL_ID)
                    );
                };
                case AMOUNT       : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_AMOUNT - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_AMOUNT)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "staff_id"     : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_STAFF_ID;
                    return compareTo.compare(buffer, begins, begins + Short.BYTES);
                };
                case "payment_id"   : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_PAYMENT_ID;
                    return compareTo.compare(buffer, begins, begins + Integer.BYTES);
                };
                case "customer_id"  : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_CUSTOMER_ID;
                    return compareTo.compare(buffer, begins, begins + Integer.BYTES);
                };
                case "payment_date" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_PAYMENT_DATE;
                    return compareTo.compare(buffer, begins, begins + 8);
                };
                case "last_update"  : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_LAST_UPDATE;
                    return compareTo.compare(buffer, begins, begins + 8);
                };
                case "rental_id"    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_RENTAL_ID)
                    );
                };
                case "amount"       : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_AMOUNT - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_AMOUNT)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public BiLongToIntFunction newComparator(final ColumnIdentifier<Payment> colId, final EntityStoreComparator comparator) {
        if (colId instanceof Payment.Identifier) {
            final Payment.Identifier _id = (Payment.Identifier) colId;
            switch (_id) {
                case STAFF_ID     : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_STAFF_ID;
                    final int bBegins = bRowOffset + FIELD_STAFF_ID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Short.BYTES,
                        bBuffer, bBegins, bBegins + Short.BYTES
                    );
                };
                case PAYMENT_ID   : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_PAYMENT_ID;
                    final int bBegins = bRowOffset + FIELD_PAYMENT_ID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Integer.BYTES,
                        bBuffer, bBegins, bBegins + Integer.BYTES
                    );
                };
                case CUSTOMER_ID  : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_CUSTOMER_ID;
                    final int bBegins = bRowOffset + FIELD_CUSTOMER_ID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Integer.BYTES,
                        bBuffer, bBegins, bBegins + Integer.BYTES
                    );
                };
                case PAYMENT_DATE : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_PAYMENT_DATE;
                    final int bBegins = bRowOffset + FIELD_PAYMENT_DATE;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + 8,
                        bBuffer, bBegins, bBegins + 8
                    );
                };
                case LAST_UPDATE  : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_LAST_UPDATE;
                    final int bBegins = bRowOffset + FIELD_LAST_UPDATE;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + 8,
                        bBuffer, bBegins, bBegins + 8
                    );
                };
                case RENTAL_ID    : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS, aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_RENTAL_ID), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS, bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_RENTAL_ID)
                    );
                };
                case AMOUNT       : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_AMOUNT - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_AMOUNT), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_AMOUNT - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_AMOUNT)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "staff_id"     : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_STAFF_ID;
                    final int bBegins = bRowOffset + FIELD_STAFF_ID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Short.BYTES,
                        bBuffer, bBegins, bBegins + Short.BYTES
                    );
                };
                case "payment_id"   : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_PAYMENT_ID;
                    final int bBegins = bRowOffset + FIELD_PAYMENT_ID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Integer.BYTES,
                        bBuffer, bBegins, bBegins + Integer.BYTES
                    );
                };
                case "customer_id"  : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_CUSTOMER_ID;
                    final int bBegins = bRowOffset + FIELD_CUSTOMER_ID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Integer.BYTES,
                        bBuffer, bBegins, bBegins + Integer.BYTES
                    );
                };
                case "payment_date" : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_PAYMENT_DATE;
                    final int bBegins = bRowOffset + FIELD_PAYMENT_DATE;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + 8,
                        bBuffer, bBegins, bBegins + 8
                    );
                };
                case "last_update"  : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_LAST_UPDATE;
                    final int bBegins = bRowOffset + FIELD_LAST_UPDATE;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + 8,
                        bBuffer, bBegins, bBegins + 8
                    );
                };
                case "rental_id"    : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS, aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_RENTAL_ID), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS, bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_RENTAL_ID)
                    );
                };
                case "amount"       : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_AMOUNT - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_AMOUNT), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_AMOUNT - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_AMOUNT)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction sizeOf() {
        return ref -> VARSIZE_BEGINS + Math.abs(bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_AMOUNT));
    }
}