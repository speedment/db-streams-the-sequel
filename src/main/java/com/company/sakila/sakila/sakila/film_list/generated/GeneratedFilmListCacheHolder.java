package com.company.sakila.sakila.sakila.film_list.generated;

import com.company.sakila.sakila.sakila.film_list.FilmList;
import com.company.sakila.sakila.sakila.film_list.FilmListEntityStoreSerializerImpl;
import com.company.sakila.sakila.sakila.film_list.FilmListManager;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.tuple.Tuple2;
import com.speedment.common.tuple.Tuples;
import com.speedment.enterprise.datastore.runtime.HasStatistics.Statistics;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStore;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreHolder;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfComparable;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfInt;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfString;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.datastore.runtime.fieldcache.MultiFieldCache;
import com.speedment.enterprise.datastore.runtime.internal.util.StatisticsInternalUtil;
import com.speedment.enterprise.datastore.runtime.util.DataStoreHolderUtil;
import com.speedment.runtime.bulk.PersistOperation;
import com.speedment.runtime.bulk.RemoveOperation;
import com.speedment.runtime.bulk.UpdateOperation;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.ColumnLabel;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.StreamSupplierComponent;
import com.speedment.runtime.field.Field;
import com.speedment.runtime.field.trait.HasIdentifier;

import java.math.BigDecimal;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.stream.Stream;

import static java.util.Objects.requireNonNull;
import static java.util.stream.Collectors.toMap;
import static java.util.stream.Collectors.toSet;

/**
 * A holder class for the various caches that are used to speed up the {@link
 * FilmListManager}.
 * 
 * Generated by
 * com.speedment.enterprise.datastore.generator.internal.code.GeneratedEntityCacheHolderTranslator
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public final class GeneratedFilmListCacheHolder implements EntityStoreHolder<FilmList> {
    
    private final EntityStore<FilmList> entityStore;
    private final OfInt fieldFidCache;
    private final OfString fieldTitleCache;
    private final OfString fieldDescriptionCache;
    private final OfString fieldCategoryCache;
    private final OfComparable<BigDecimal> fieldPriceCache;
    private final OfInt fieldLengthCache;
    private final OfString fieldRatingCache;
    private final OfString fieldActorsCache;
    
    public GeneratedFilmListCacheHolder(
            EntityStore<FilmList> entityStore,
            OfInt fieldFidCache,
            OfString fieldTitleCache,
            OfString fieldDescriptionCache,
            OfString fieldCategoryCache,
            OfComparable<BigDecimal> fieldPriceCache,
            OfInt fieldLengthCache,
            OfString fieldRatingCache,
            OfString fieldActorsCache) {
        
        this.entityStore           = requireNonNull(entityStore);
        this.fieldFidCache         = requireNonNull(fieldFidCache);
        this.fieldTitleCache       = requireNonNull(fieldTitleCache);
        this.fieldDescriptionCache = requireNonNull(fieldDescriptionCache);
        this.fieldCategoryCache    = requireNonNull(fieldCategoryCache);
        this.fieldPriceCache       = requireNonNull(fieldPriceCache);
        this.fieldLengthCache      = requireNonNull(fieldLengthCache);
        this.fieldRatingCache      = requireNonNull(fieldRatingCache);
        this.fieldActorsCache      = requireNonNull(fieldActorsCache);
    }
    
    @Override
    public EntityStore<FilmList> getEntityStore() {
        return entityStore;
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <CACHE extends FieldCache<CACHE>> CACHE getFieldCache(ColumnIdentifier<FilmList> columnId) {
        if (columnId instanceof FilmList.Identifier) {
            final FilmList.Identifier _id = (FilmList.Identifier) columnId;
            switch (_id) {
                case FID         : return (CACHE) fieldFidCache;
                case TITLE       : return (CACHE) fieldTitleCache;
                case DESCRIPTION : return (CACHE) fieldDescriptionCache;
                case CATEGORY    : return (CACHE) fieldCategoryCache;
                case PRICE       : return (CACHE) fieldPriceCache;
                case LENGTH      : return (CACHE) fieldLengthCache;
                case RATING      : return (CACHE) fieldRatingCache;
                case ACTORS      : return (CACHE) fieldActorsCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = columnId.getColumnId();
            switch (_colName) {
                case "FID"         : return (CACHE) fieldFidCache;
                case "title"       : return (CACHE) fieldTitleCache;
                case "description" : return (CACHE) fieldDescriptionCache;
                case "category"    : return (CACHE) fieldCategoryCache;
                case "price"       : return (CACHE) fieldPriceCache;
                case "length"      : return (CACHE) fieldLengthCache;
                case "rating"      : return (CACHE) fieldRatingCache;
                case "actors"      : return (CACHE) fieldActorsCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public boolean isHavingMultiFieldCache(ColumnIdentifier<FilmList> columnId) {
        return false;
    }
    
    public static CompletableFuture<GeneratedFilmListCacheHolder> reload(StreamSupplierComponent streamSupplier, ExecutorService executor) {
        return reload(DataStoreHolderUtil.buildEntityStore(
            streamSupplier,
            executor,
            FilmListEntityStoreSerializerImpl::new,
            TableIdentifier.of("sakila", "sakila", "film_list")
        ), executor);
    }
    
    @Override
    public EntityStoreHolder<FilmList> recycleAndPersist(PersistOperation<FilmList> persistOperation) {
        return wrapped().recycleAndPersist(persistOperation);
    }
    
    @Override
    public EntityStoreHolder<FilmList> recycleAndRemove(RemoveOperation<FilmList> removeOperation) {
        return wrapped().recycleAndRemove(removeOperation);
    }
    
    @Override
    public EntityStoreHolder<FilmList> recycleAndUpdate(UpdateOperation<FilmList> updateOperation) {
        return wrapped().recycleAndUpdate(updateOperation);
    }
    
    private EntityStoreHolder<FilmList> wrapped() {
        // Use explicit type for Stream to improve compilation time.
        final Map<ColumnLabel, FieldCache<?>> fieldCaches = Stream.<Tuple2<HasIdentifier<FilmList>, FieldCache<?>>>of(
            Tuples.of(FilmList.FID,        fieldFidCache),
            Tuples.of(FilmList.TITLE,      fieldTitleCache),
            Tuples.of(FilmList.DESCRIPTION,fieldDescriptionCache),
            Tuples.of(FilmList.CATEGORY,   fieldCategoryCache),
            Tuples.of(FilmList.PRICE,      fieldPriceCache),
            Tuples.of(FilmList.LENGTH,     fieldLengthCache),
            Tuples.of(FilmList.RATING,     fieldRatingCache),
            Tuples.of(FilmList.ACTORS,     fieldActorsCache)
        )
            .collect(toMap(t2 -> t2.get0().identifier().label(), Tuple2::get1));
        final Map<ColumnLabel,  Map<ColumnLabel, MultiFieldCache<?, ?, ?>>>  multiFieldCaches = createMultiCacheMap();
        final Set<ColumnIdentifier<FilmList>> columnIdentifiers = Stream.<HasIdentifier<FilmList>>of(
            FilmList.FID,
            FilmList.TITLE,
            FilmList.DESCRIPTION,
            FilmList.CATEGORY,
            FilmList.PRICE,
            FilmList.LENGTH,
            FilmList.RATING,
            FilmList.ACTORS
        )
            .map(HasIdentifier::identifier)
            .collect(toSet());
        return EntityStoreHolder.of(
            entityStore,
            fieldCaches,
            multiFieldCaches,
            columnIdentifiers
        );
    }
    
    public static CompletableFuture<GeneratedFilmListCacheHolder> reload(CompletableFuture<EntityStore<FilmList>> entityStoreFuture, ExecutorService executor) {
        final CompletableFuture<FieldCache.OfInt> fieldFidCacheFuture =
            DataStoreHolderUtil.buildIntCache(entityStoreFuture, executor, FilmList.FID, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldTitleCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, FilmList.TITLE, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldDescriptionCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, FilmList.DESCRIPTION, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldCategoryCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, FilmList.CATEGORY, 0);
        
        final CompletableFuture<FieldCache.OfComparable<BigDecimal>> fieldPriceCacheFuture =
            DataStoreHolderUtil.buildComparableCache(entityStoreFuture, executor, FilmList.PRICE, 0);
        
        final CompletableFuture<FieldCache.OfInt> fieldLengthCacheFuture =
            DataStoreHolderUtil.buildIntCache(entityStoreFuture, executor, FilmList.LENGTH, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldRatingCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, FilmList.RATING, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldActorsCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, FilmList.ACTORS, 0);
        
        return entityStoreFuture.thenApplyAsync(entityStore -> {
            try {
                return new GeneratedFilmListCacheHolder(
                    entityStore,
                    fieldFidCacheFuture.get(),
                    fieldTitleCacheFuture.get(),
                    fieldDescriptionCacheFuture.get(),
                    fieldCategoryCacheFuture.get(),
                    fieldPriceCacheFuture.get(),
                    fieldLengthCacheFuture.get(),
                    fieldRatingCacheFuture.get(),
                    fieldActorsCacheFuture.get()
                );
            } catch (final ExecutionException | InterruptedException ex) {
                throw new RuntimeException(ex);
            }
        });
    }
    
    @Override
    public void close() {
        entityStore.close();
        fieldFidCache.close();
        fieldTitleCache.close();
        fieldDescriptionCache.close();
        fieldCategoryCache.close();
        fieldPriceCache.close();
        fieldLengthCache.close();
        fieldRatingCache.close();
        fieldActorsCache.close();
    }
    
    @Override
    public Map<String, Map<Statistics, ?>> getStatistics() {
        return StatisticsInternalUtil.getStatistics(    
            this,
            entityStore.identifier(),
            FilmList.Identifier.FID,
            FilmList.Identifier.TITLE,
            FilmList.Identifier.DESCRIPTION,
            FilmList.Identifier.CATEGORY,
            FilmList.Identifier.PRICE,
            FilmList.Identifier.LENGTH,
            FilmList.Identifier.RATING,
            FilmList.Identifier.ACTORS
        );
    }
    
    private Map<ColumnLabel, Map<ColumnLabel, MultiFieldCache<?, ?, ?>>> createMultiCacheMap() {
        return Collections.emptyMap();
    }
}