package com.company.sakila.sakila.sakila.customer_list.generated;

import com.company.sakila.sakila.sakila.customer_list.CustomerList;
import com.company.sakila.sakila.sakila.customer_list.CustomerListEntityStoreSerializerImpl;
import com.company.sakila.sakila.sakila.customer_list.CustomerListManager;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.tuple.Tuple2;
import com.speedment.common.tuple.Tuples;
import com.speedment.enterprise.datastore.runtime.HasStatistics.Statistics;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStore;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreHolder;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfInt;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfShort;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfString;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.datastore.runtime.fieldcache.MultiFieldCache;
import com.speedment.enterprise.datastore.runtime.internal.util.StatisticsInternalUtil;
import com.speedment.enterprise.datastore.runtime.util.DataStoreHolderUtil;
import com.speedment.runtime.bulk.PersistOperation;
import com.speedment.runtime.bulk.RemoveOperation;
import com.speedment.runtime.bulk.UpdateOperation;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.ColumnLabel;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.StreamSupplierComponent;
import com.speedment.runtime.field.Field;
import com.speedment.runtime.field.trait.HasIdentifier;

import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.stream.Stream;

import static java.util.Objects.requireNonNull;
import static java.util.stream.Collectors.toMap;
import static java.util.stream.Collectors.toSet;

/**
 * A holder class for the various caches that are used to speed up the {@link
 * CustomerListManager}.
 * 
 * Generated by
 * com.speedment.enterprise.datastore.generator.internal.code.GeneratedEntityCacheHolderTranslator
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public final class GeneratedCustomerListCacheHolder implements EntityStoreHolder<CustomerList> {
    
    private final EntityStore<CustomerList> entityStore;
    private final OfInt fieldIdCache;
    private final OfString fieldNameCache;
    private final OfString fieldAddressCache;
    private final OfString fieldZipCodeCache;
    private final OfString fieldPhoneCache;
    private final OfString fieldCityCache;
    private final OfString fieldCountryCache;
    private final OfString fieldNotesCache;
    private final OfShort fieldSidCache;
    
    public GeneratedCustomerListCacheHolder(
            EntityStore<CustomerList> entityStore,
            OfInt fieldIdCache,
            OfString fieldNameCache,
            OfString fieldAddressCache,
            OfString fieldZipCodeCache,
            OfString fieldPhoneCache,
            OfString fieldCityCache,
            OfString fieldCountryCache,
            OfString fieldNotesCache,
            OfShort fieldSidCache) {
        
        this.entityStore       = requireNonNull(entityStore);
        this.fieldIdCache      = requireNonNull(fieldIdCache);
        this.fieldNameCache    = requireNonNull(fieldNameCache);
        this.fieldAddressCache = requireNonNull(fieldAddressCache);
        this.fieldZipCodeCache = requireNonNull(fieldZipCodeCache);
        this.fieldPhoneCache   = requireNonNull(fieldPhoneCache);
        this.fieldCityCache    = requireNonNull(fieldCityCache);
        this.fieldCountryCache = requireNonNull(fieldCountryCache);
        this.fieldNotesCache   = requireNonNull(fieldNotesCache);
        this.fieldSidCache     = requireNonNull(fieldSidCache);
    }
    
    @Override
    public EntityStore<CustomerList> getEntityStore() {
        return entityStore;
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <CACHE extends FieldCache<CACHE>> CACHE getFieldCache(ColumnIdentifier<CustomerList> columnId) {
        if (columnId instanceof CustomerList.Identifier) {
            final CustomerList.Identifier _id = (CustomerList.Identifier) columnId;
            switch (_id) {
                case ID       : return (CACHE) fieldIdCache;
                case NAME     : return (CACHE) fieldNameCache;
                case ADDRESS  : return (CACHE) fieldAddressCache;
                case ZIP_CODE : return (CACHE) fieldZipCodeCache;
                case PHONE    : return (CACHE) fieldPhoneCache;
                case CITY     : return (CACHE) fieldCityCache;
                case COUNTRY  : return (CACHE) fieldCountryCache;
                case NOTES    : return (CACHE) fieldNotesCache;
                case SID      : return (CACHE) fieldSidCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = columnId.getColumnId();
            switch (_colName) {
                case "ID"       : return (CACHE) fieldIdCache;
                case "name"     : return (CACHE) fieldNameCache;
                case "address"  : return (CACHE) fieldAddressCache;
                case "zip code" : return (CACHE) fieldZipCodeCache;
                case "phone"    : return (CACHE) fieldPhoneCache;
                case "city"     : return (CACHE) fieldCityCache;
                case "country"  : return (CACHE) fieldCountryCache;
                case "notes"    : return (CACHE) fieldNotesCache;
                case "SID"      : return (CACHE) fieldSidCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public boolean isHavingMultiFieldCache(ColumnIdentifier<CustomerList> columnId) {
        return false;
    }
    
    public static CompletableFuture<GeneratedCustomerListCacheHolder> reload(StreamSupplierComponent streamSupplier, ExecutorService executor) {
        return reload(DataStoreHolderUtil.buildEntityStore(
            streamSupplier,
            executor,
            CustomerListEntityStoreSerializerImpl::new,
            TableIdentifier.of("sakila", "sakila", "customer_list")
        ), executor);
    }
    
    @Override
    public EntityStoreHolder<CustomerList> recycleAndPersist(PersistOperation<CustomerList> persistOperation) {
        return wrapped().recycleAndPersist(persistOperation);
    }
    
    @Override
    public EntityStoreHolder<CustomerList> recycleAndRemove(RemoveOperation<CustomerList> removeOperation) {
        return wrapped().recycleAndRemove(removeOperation);
    }
    
    @Override
    public EntityStoreHolder<CustomerList> recycleAndUpdate(UpdateOperation<CustomerList> updateOperation) {
        return wrapped().recycleAndUpdate(updateOperation);
    }
    
    private EntityStoreHolder<CustomerList> wrapped() {
        // Use explicit type for Stream to improve compilation time.
        final Map<ColumnLabel, FieldCache<?>> fieldCaches = Stream.<Tuple2<HasIdentifier<CustomerList>, FieldCache<?>>>of(
            Tuples.of(CustomerList.ID,      fieldIdCache),
            Tuples.of(CustomerList.NAME,    fieldNameCache),
            Tuples.of(CustomerList.ADDRESS, fieldAddressCache),
            Tuples.of(CustomerList.ZIP_CODE,fieldZipCodeCache),
            Tuples.of(CustomerList.PHONE,   fieldPhoneCache),
            Tuples.of(CustomerList.CITY,    fieldCityCache),
            Tuples.of(CustomerList.COUNTRY, fieldCountryCache),
            Tuples.of(CustomerList.NOTES,   fieldNotesCache),
            Tuples.of(CustomerList.SID,     fieldSidCache)
        )
            .collect(toMap(t2 -> t2.get0().identifier().label(), Tuple2::get1));
        final Map<ColumnLabel,  Map<ColumnLabel, MultiFieldCache<?, ?, ?>>>  multiFieldCaches = createMultiCacheMap();
        final Set<ColumnIdentifier<CustomerList>> columnIdentifiers = Stream.<HasIdentifier<CustomerList>>of(
            CustomerList.ID,
            CustomerList.NAME,
            CustomerList.ADDRESS,
            CustomerList.ZIP_CODE,
            CustomerList.PHONE,
            CustomerList.CITY,
            CustomerList.COUNTRY,
            CustomerList.NOTES,
            CustomerList.SID
        )
            .map(HasIdentifier::identifier)
            .collect(toSet());
        return EntityStoreHolder.of(
            entityStore,
            fieldCaches,
            multiFieldCaches,
            columnIdentifiers
        );
    }
    
    public static CompletableFuture<GeneratedCustomerListCacheHolder> reload(CompletableFuture<EntityStore<CustomerList>> entityStoreFuture, ExecutorService executor) {
        final CompletableFuture<FieldCache.OfInt> fieldIdCacheFuture =
            DataStoreHolderUtil.buildIntCache(entityStoreFuture, executor, CustomerList.ID, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldNameCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, CustomerList.NAME, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldAddressCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, CustomerList.ADDRESS, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldZipCodeCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, CustomerList.ZIP_CODE, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldPhoneCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, CustomerList.PHONE, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldCityCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, CustomerList.CITY, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldCountryCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, CustomerList.COUNTRY, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldNotesCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, CustomerList.NOTES, 0);
        
        final CompletableFuture<FieldCache.OfShort> fieldSidCacheFuture =
            DataStoreHolderUtil.buildShortCache(entityStoreFuture, executor, CustomerList.SID, 0);
        
        return entityStoreFuture.thenApplyAsync(entityStore -> {
            try {
                return new GeneratedCustomerListCacheHolder(
                    entityStore,
                    fieldIdCacheFuture.get(),
                    fieldNameCacheFuture.get(),
                    fieldAddressCacheFuture.get(),
                    fieldZipCodeCacheFuture.get(),
                    fieldPhoneCacheFuture.get(),
                    fieldCityCacheFuture.get(),
                    fieldCountryCacheFuture.get(),
                    fieldNotesCacheFuture.get(),
                    fieldSidCacheFuture.get()
                );
            } catch (final ExecutionException | InterruptedException ex) {
                throw new RuntimeException(ex);
            }
        });
    }
    
    @Override
    public void close() {
        entityStore.close();
        fieldIdCache.close();
        fieldNameCache.close();
        fieldAddressCache.close();
        fieldZipCodeCache.close();
        fieldPhoneCache.close();
        fieldCityCache.close();
        fieldCountryCache.close();
        fieldNotesCache.close();
        fieldSidCache.close();
    }
    
    @Override
    public Map<String, Map<Statistics, ?>> getStatistics() {
        return StatisticsInternalUtil.getStatistics(    
            this,
            entityStore.identifier(),
            CustomerList.Identifier.ID,
            CustomerList.Identifier.NAME,
            CustomerList.Identifier.ADDRESS,
            CustomerList.Identifier.ZIP_CODE,
            CustomerList.Identifier.PHONE,
            CustomerList.Identifier.CITY,
            CustomerList.Identifier.COUNTRY,
            CustomerList.Identifier.NOTES,
            CustomerList.Identifier.SID
        );
    }
    
    private Map<ColumnLabel, Map<ColumnLabel, MultiFieldCache<?, ?, ?>>> createMultiCacheMap() {
        return Collections.emptyMap();
    }
}