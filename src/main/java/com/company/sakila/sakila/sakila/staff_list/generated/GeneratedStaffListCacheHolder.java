package com.company.sakila.sakila.sakila.staff_list.generated;

import com.company.sakila.sakila.sakila.staff_list.StaffList;
import com.company.sakila.sakila.sakila.staff_list.StaffListEntityStoreSerializerImpl;
import com.company.sakila.sakila.sakila.staff_list.StaffListManager;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.tuple.Tuple2;
import com.speedment.common.tuple.Tuples;
import com.speedment.enterprise.datastore.runtime.HasStatistics.Statistics;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStore;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreHolder;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfShort;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfString;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.datastore.runtime.fieldcache.MultiFieldCache;
import com.speedment.enterprise.datastore.runtime.internal.util.StatisticsInternalUtil;
import com.speedment.enterprise.datastore.runtime.util.DataStoreHolderUtil;
import com.speedment.runtime.bulk.PersistOperation;
import com.speedment.runtime.bulk.RemoveOperation;
import com.speedment.runtime.bulk.UpdateOperation;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.ColumnLabel;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.StreamSupplierComponent;
import com.speedment.runtime.field.Field;
import com.speedment.runtime.field.trait.HasIdentifier;

import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.stream.Stream;

import static java.util.Objects.requireNonNull;
import static java.util.stream.Collectors.toMap;
import static java.util.stream.Collectors.toSet;

/**
 * A holder class for the various caches that are used to speed up the {@link
 * StaffListManager}.
 * 
 * Generated by
 * com.speedment.enterprise.datastore.generator.internal.code.GeneratedEntityCacheHolderTranslator
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public final class GeneratedStaffListCacheHolder implements EntityStoreHolder<StaffList> {
    
    private final EntityStore<StaffList> entityStore;
    private final OfShort fieldIdCache;
    private final OfString fieldNameCache;
    private final OfString fieldAddressCache;
    private final OfString fieldZipCodeCache;
    private final OfString fieldPhoneCache;
    private final OfString fieldCityCache;
    private final OfString fieldCountryCache;
    private final OfShort fieldSidCache;
    
    public GeneratedStaffListCacheHolder(
            EntityStore<StaffList> entityStore,
            OfShort fieldIdCache,
            OfString fieldNameCache,
            OfString fieldAddressCache,
            OfString fieldZipCodeCache,
            OfString fieldPhoneCache,
            OfString fieldCityCache,
            OfString fieldCountryCache,
            OfShort fieldSidCache) {
        
        this.entityStore       = requireNonNull(entityStore);
        this.fieldIdCache      = requireNonNull(fieldIdCache);
        this.fieldNameCache    = requireNonNull(fieldNameCache);
        this.fieldAddressCache = requireNonNull(fieldAddressCache);
        this.fieldZipCodeCache = requireNonNull(fieldZipCodeCache);
        this.fieldPhoneCache   = requireNonNull(fieldPhoneCache);
        this.fieldCityCache    = requireNonNull(fieldCityCache);
        this.fieldCountryCache = requireNonNull(fieldCountryCache);
        this.fieldSidCache     = requireNonNull(fieldSidCache);
    }
    
    @Override
    public EntityStore<StaffList> getEntityStore() {
        return entityStore;
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <CACHE extends FieldCache<CACHE>> CACHE getFieldCache(ColumnIdentifier<StaffList> columnId) {
        if (columnId instanceof StaffList.Identifier) {
            final StaffList.Identifier _id = (StaffList.Identifier) columnId;
            switch (_id) {
                case ID       : return (CACHE) fieldIdCache;
                case NAME     : return (CACHE) fieldNameCache;
                case ADDRESS  : return (CACHE) fieldAddressCache;
                case ZIP_CODE : return (CACHE) fieldZipCodeCache;
                case PHONE    : return (CACHE) fieldPhoneCache;
                case CITY     : return (CACHE) fieldCityCache;
                case COUNTRY  : return (CACHE) fieldCountryCache;
                case SID      : return (CACHE) fieldSidCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = columnId.getColumnId();
            switch (_colName) {
                case "ID"       : return (CACHE) fieldIdCache;
                case "name"     : return (CACHE) fieldNameCache;
                case "address"  : return (CACHE) fieldAddressCache;
                case "zip code" : return (CACHE) fieldZipCodeCache;
                case "phone"    : return (CACHE) fieldPhoneCache;
                case "city"     : return (CACHE) fieldCityCache;
                case "country"  : return (CACHE) fieldCountryCache;
                case "SID"      : return (CACHE) fieldSidCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public boolean isHavingMultiFieldCache(ColumnIdentifier<StaffList> columnId) {
        return false;
    }
    
    public static CompletableFuture<GeneratedStaffListCacheHolder> reload(StreamSupplierComponent streamSupplier, ExecutorService executor) {
        return reload(DataStoreHolderUtil.buildEntityStore(
            streamSupplier,
            executor,
            StaffListEntityStoreSerializerImpl::new,
            TableIdentifier.of("sakila", "sakila", "staff_list")
        ), executor);
    }
    
    @Override
    public EntityStoreHolder<StaffList> recycleAndPersist(PersistOperation<StaffList> persistOperation) {
        return wrapped().recycleAndPersist(persistOperation);
    }
    
    @Override
    public EntityStoreHolder<StaffList> recycleAndRemove(RemoveOperation<StaffList> removeOperation) {
        return wrapped().recycleAndRemove(removeOperation);
    }
    
    @Override
    public EntityStoreHolder<StaffList> recycleAndUpdate(UpdateOperation<StaffList> updateOperation) {
        return wrapped().recycleAndUpdate(updateOperation);
    }
    
    private EntityStoreHolder<StaffList> wrapped() {
        // Use explicit type for Stream to improve compilation time.
        final Map<ColumnLabel, FieldCache<?>> fieldCaches = Stream.<Tuple2<HasIdentifier<StaffList>, FieldCache<?>>>of(
            Tuples.of(StaffList.ID,      fieldIdCache),
            Tuples.of(StaffList.NAME,    fieldNameCache),
            Tuples.of(StaffList.ADDRESS, fieldAddressCache),
            Tuples.of(StaffList.ZIP_CODE,fieldZipCodeCache),
            Tuples.of(StaffList.PHONE,   fieldPhoneCache),
            Tuples.of(StaffList.CITY,    fieldCityCache),
            Tuples.of(StaffList.COUNTRY, fieldCountryCache),
            Tuples.of(StaffList.SID,     fieldSidCache)
        )
            .collect(toMap(t2 -> t2.get0().identifier().label(), Tuple2::get1));
        final Map<ColumnLabel,  Map<ColumnLabel, MultiFieldCache<?, ?, ?>>>  multiFieldCaches = createMultiCacheMap();
        final Set<ColumnIdentifier<StaffList>> columnIdentifiers = Stream.<HasIdentifier<StaffList>>of(
            StaffList.ID,
            StaffList.NAME,
            StaffList.ADDRESS,
            StaffList.ZIP_CODE,
            StaffList.PHONE,
            StaffList.CITY,
            StaffList.COUNTRY,
            StaffList.SID
        )
            .map(HasIdentifier::identifier)
            .collect(toSet());
        return EntityStoreHolder.of(
            entityStore,
            fieldCaches,
            multiFieldCaches,
            columnIdentifiers
        );
    }
    
    public static CompletableFuture<GeneratedStaffListCacheHolder> reload(CompletableFuture<EntityStore<StaffList>> entityStoreFuture, ExecutorService executor) {
        final CompletableFuture<FieldCache.OfShort> fieldIdCacheFuture =
            DataStoreHolderUtil.buildShortCache(entityStoreFuture, executor, StaffList.ID, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldNameCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, StaffList.NAME, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldAddressCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, StaffList.ADDRESS, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldZipCodeCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, StaffList.ZIP_CODE, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldPhoneCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, StaffList.PHONE, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldCityCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, StaffList.CITY, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldCountryCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, StaffList.COUNTRY, 0);
        
        final CompletableFuture<FieldCache.OfShort> fieldSidCacheFuture =
            DataStoreHolderUtil.buildShortCache(entityStoreFuture, executor, StaffList.SID, 0);
        
        return entityStoreFuture.thenApplyAsync(entityStore -> {
            try {
                return new GeneratedStaffListCacheHolder(
                    entityStore,
                    fieldIdCacheFuture.get(),
                    fieldNameCacheFuture.get(),
                    fieldAddressCacheFuture.get(),
                    fieldZipCodeCacheFuture.get(),
                    fieldPhoneCacheFuture.get(),
                    fieldCityCacheFuture.get(),
                    fieldCountryCacheFuture.get(),
                    fieldSidCacheFuture.get()
                );
            } catch (final ExecutionException | InterruptedException ex) {
                throw new RuntimeException(ex);
            }
        });
    }
    
    @Override
    public void close() {
        entityStore.close();
        fieldIdCache.close();
        fieldNameCache.close();
        fieldAddressCache.close();
        fieldZipCodeCache.close();
        fieldPhoneCache.close();
        fieldCityCache.close();
        fieldCountryCache.close();
        fieldSidCache.close();
    }
    
    @Override
    public Map<String, Map<Statistics, ?>> getStatistics() {
        return StatisticsInternalUtil.getStatistics(    
            this,
            entityStore.identifier(),
            StaffList.Identifier.ID,
            StaffList.Identifier.NAME,
            StaffList.Identifier.ADDRESS,
            StaffList.Identifier.ZIP_CODE,
            StaffList.Identifier.PHONE,
            StaffList.Identifier.CITY,
            StaffList.Identifier.COUNTRY,
            StaffList.Identifier.SID
        );
    }
    
    private Map<ColumnLabel, Map<ColumnLabel, MultiFieldCache<?, ?, ?>>> createMultiCacheMap() {
        return Collections.emptyMap();
    }
}