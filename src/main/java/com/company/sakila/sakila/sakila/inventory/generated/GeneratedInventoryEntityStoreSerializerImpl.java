package com.company.sakila.sakila.sakila.inventory.generated;

import com.company.sakila.sakila.sakila.film.Film;
import com.company.sakila.sakila.sakila.inventory.Inventory;
import com.company.sakila.sakila.sakila.inventory.InventoryImpl;
import com.company.sakila.sakila.sakila.store.Store;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.function.BiLongToIntFunction;
import com.speedment.common.function.LongToBooleanFunction;
import com.speedment.common.function.LongToByteFunction;
import com.speedment.common.function.LongToCharFunction;
import com.speedment.common.function.LongToFloatFunction;
import com.speedment.common.function.LongToShortFunction;
import com.speedment.enterprise.datastore.runtime.DataStoreHolder;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreSerializer;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStoreComparator;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStoreCompareTo;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStorePredicate;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.datastore.runtime.util.SerializerUtil;
import com.speedment.runtime.config.identifier.ColumnIdentifier;

import java.nio.ByteBuffer;
import java.sql.Timestamp;
import java.util.List;
import java.util.function.BiConsumer;
import java.util.function.LongConsumer;
import java.util.function.LongFunction;
import java.util.function.LongPredicate;
import java.util.function.LongToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongUnaryOperator;

import static java.util.Collections.singletonList;
import static java.util.Objects.requireNonNull;
import static java.util.stream.Collectors.joining;

/**
 * Serializes and deserializes instances of Inventory.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedInventoryEntityStoreSerializerImpl implements EntityStoreSerializer<Inventory> {
    
    private final LongFunction<ByteBuffer> bufferFinder;
    private final LongToIntFunction offsetFinder;
    private final static int FIELD_STORE_ID = 0;
    private final static int FIELD_INVENTORY_ID = 2;
    private final static int FIELD_FILM_ID = 6;
    private final static int FIELD_LAST_UPDATE = 10;
    private final static int FKREF_FK_INVENTORY_FILM = 18;
    private final static int FKREF_FK_INVENTORY_STORE = 26;
    private final static int VARSIZE_BEGINS = 34;
    
    protected GeneratedInventoryEntityStoreSerializerImpl(final LongFunction<ByteBuffer> bufferFinder, final LongToIntFunction offsetFinder) {
        this.bufferFinder = requireNonNull(bufferFinder);
        this.offsetFinder = requireNonNull(offsetFinder);
    }
    
    @Override
    public BiConsumer<ByteBuffer, Inventory> serializer() {
        return (buffer, entity) -> {
            buffer.putShort(FIELD_STORE_ID, entity.getStoreId());
            buffer.putInt(FIELD_INVENTORY_ID, entity.getInventoryId());
            buffer.putInt(FIELD_FILM_ID, entity.getFilmId());
            buffer.putLong(FIELD_LAST_UPDATE, entity.getLastUpdate().getTime());
            buffer.putLong(FKREF_FK_INVENTORY_FILM, -1L); // Will be set later on in the decorator()-method.
            buffer.putLong(FKREF_FK_INVENTORY_STORE, -1L); // Will be set later on in the decorator()-method.
            buffer.position(0);
            buffer.limit(VARSIZE_BEGINS);
        };
    }
    
    @Override
    public LongConsumer decorator(DataStoreHolder holder) {
        final FieldCache.OfInt film_filmIdFieldCache = holder.getFieldCache(Film.FILM_ID.identifier());
        final FieldCache.OfShort store_storeIdFieldCache = holder.getFieldCache(Store.STORE_ID.identifier());
        final LongToIntFunction filmIdDeserializer = intDeserializer(Inventory.FILM_ID.identifier());
        final LongToShortFunction storeIdDeserializer = shortDeserializer(Inventory.STORE_ID.identifier());
        final LongUnaryOperator fkInventoryFilmResolver = ref -> {
            final int value = filmIdDeserializer.applyAsInt(ref);
            return film_filmIdFieldCache.any(value);
        };
        final LongUnaryOperator fkInventoryStoreResolver = ref -> {
            final short value = storeIdDeserializer.applyAsShort(ref);
            return store_storeIdFieldCache.any(value);
        };
        return ref -> {
            final ByteBuffer buffer = bufferFinder.apply(ref);
            final int rowOffset = offsetFinder.applyAsInt(ref);
            buffer.putLong(rowOffset + FKREF_FK_INVENTORY_FILM, fkInventoryFilmResolver.applyAsLong(ref));
            buffer.putLong(rowOffset + FKREF_FK_INVENTORY_STORE, fkInventoryStoreResolver.applyAsLong(ref));
        };
    }
    
    @Override
    public LongFunction<Inventory> deserializer() {
        return ref -> {
            final ByteBuffer buffer = bufferFinder.apply(ref);
            final int offset = offsetFinder.applyAsInt(ref);
            final Inventory entity = new InventoryImpl();
            entity.setInventoryId(buffer.getInt(offset + FIELD_INVENTORY_ID));
            entity.setFilmId(buffer.getInt(offset + FIELD_FILM_ID));
            entity.setStoreId(buffer.getShort(offset + FIELD_STORE_ID));
            entity.setLastUpdate(new Timestamp(buffer.getLong(offset + FIELD_LAST_UPDATE)));
            return entity;
        };
    }
    
    @Override
    public Class<?> deserializedType(final ColumnIdentifier<Inventory> colId) {
        if (colId instanceof Inventory.Identifier) {
            final Inventory.Identifier _id = (Inventory.Identifier) colId;
            switch (_id) {
                case STORE_ID     : return short.class;
                case INVENTORY_ID : 
                case FILM_ID      : return int.class;
                case LAST_UPDATE  : return Timestamp.class;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "store_id"     : return short.class;
                case "inventory_id" : 
                case "film_id"      : return int.class;
                case "last_update"  : return Timestamp.class;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public <FK_ENTITY> LongUnaryOperator finder(final ColumnIdentifier<Inventory> colId, final ColumnIdentifier<FK_ENTITY> fkColId) {
        return finder(singletonList(colId), singletonList(fkColId));
    }
    
    @Override
    public <FK_ENTITY> LongUnaryOperator finder(final List<ColumnIdentifier<Inventory>> cols, final List<ColumnIdentifier<FK_ENTITY>> fkCols) {
        final String fkName = SerializerUtil.uniqueFkName(cols, fkCols);
        switch (fkName) {
            case "{film_id}->film{film_id}": return finder("fk_inventory_film");
            case "{store_id}->store{store_id}": return finder("fk_inventory_store");
        }
        
        throw new IllegalArgumentException(
            fkName + " is not a valid foreign reference name."
        );
    }
    
    @Override
    public LongUnaryOperator finder(final String fkName) {
        switch (fkName) {
            case "fk_inventory_film": return ref -> bufferFinder.apply(ref).getLong(offsetFinder.applyAsInt(ref) + FKREF_FK_INVENTORY_FILM);
            case "fk_inventory_store": return ref -> bufferFinder.apply(ref).getLong(offsetFinder.applyAsInt(ref) + FKREF_FK_INVENTORY_STORE);
        }
        
        throw new IllegalArgumentException(
            "Could not find a foreign key " + fkName + " in table 'inventory'."
        );
    }
    
    @Override
    public LongPredicate isNull(final ColumnIdentifier<Inventory> colId) {
        if (colId instanceof Inventory.Identifier) {
            final Inventory.Identifier _id = (Inventory.Identifier) colId;
            switch (_id) {
                case STORE_ID     : 
                case INVENTORY_ID : 
                case FILM_ID      : 
                case LAST_UPDATE  : return ALWAYS_FALSE;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "store_id"     : 
                case "inventory_id" : 
                case "film_id"      : 
                case "last_update"  : return ALWAYS_FALSE;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongPredicate isPresent(final ColumnIdentifier<Inventory> colId) {
        if (colId instanceof Inventory.Identifier) {
            final Inventory.Identifier _id = (Inventory.Identifier) colId;
            switch (_id) {
                case STORE_ID     : 
                case INVENTORY_ID : 
                case FILM_ID      : 
                case LAST_UPDATE  : return ALWAYS_TRUE;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "store_id"     : 
                case "inventory_id" : 
                case "film_id"      : 
                case "last_update"  : return ALWAYS_TRUE;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToByteFunction byteDeserializer(final ColumnIdentifier<Inventory> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type byte.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToShortFunction shortDeserializer(final ColumnIdentifier<Inventory> colId) {
        if ("store_id".equals(colId.getColumnId())) {
            return ref -> bufferFinder.apply(ref).getShort(offsetFinder.applyAsInt(ref) + FIELD_STORE_ID);
        }
        
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type short.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction intDeserializer(final ColumnIdentifier<Inventory> colId) {
        if (colId instanceof Inventory.Identifier) {
            final Inventory.Identifier _id = (Inventory.Identifier) colId;
            switch (_id) {
                case INVENTORY_ID : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_INVENTORY_ID);
                case FILM_ID      : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_FILM_ID);
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type int.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "inventory_id" : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_INVENTORY_ID);
                case "film_id"      : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_FILM_ID);
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type int.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongUnaryOperator longDeserializer(final ColumnIdentifier<Inventory> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type long.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToFloatFunction floatDeserializer(final ColumnIdentifier<Inventory> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type float.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToDoubleFunction doubleDeserializer(final ColumnIdentifier<Inventory> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type double.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToCharFunction charDeserializer(final ColumnIdentifier<Inventory> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type char.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToBooleanFunction booleanDeserializer(final ColumnIdentifier<Inventory> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type boolean.", colId.getColumnId())
        );
    }
    
    @Override
    public LongFunction<?> objectDeserializer(final ColumnIdentifier<Inventory> colId) {
        if ("last_update".equals(colId.getColumnId())) {
            return ref -> new Timestamp(bufferFinder.apply(ref).getLong(offsetFinder.applyAsInt(ref) + FIELD_LAST_UPDATE));
        }
        
        throw new UnsupportedOperationException(
            String.format("Unknown column name '%s'.", colId.getColumnId())
        );
    }
    
    @Override
    public BiLongToIntFunction comparator(final ColumnIdentifier<Inventory> colId) {
        if (colId instanceof Inventory.Identifier) {
            final Inventory.Identifier _id = (Inventory.Identifier) colId;
            switch (_id) {
                case STORE_ID     : return (aRef, bRef) -> Short.compare(
                    bufferFinder.apply(aRef).getShort(offsetFinder.applyAsInt(aRef) + FIELD_STORE_ID),
                    bufferFinder.apply(bRef).getShort(offsetFinder.applyAsInt(bRef) + FIELD_STORE_ID)
                );
                case INVENTORY_ID : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_INVENTORY_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_INVENTORY_ID)
                );
                case FILM_ID      : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_FILM_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_FILM_ID)
                );
                case LAST_UPDATE  : return (aRef, bRef) -> Long.compare(
                    bufferFinder.apply(aRef).getLong(offsetFinder.applyAsInt(aRef) + FIELD_LAST_UPDATE),
                    bufferFinder.apply(bRef).getLong(offsetFinder.applyAsInt(bRef) + FIELD_LAST_UPDATE)
                );
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "store_id"     : return (aRef, bRef) -> Short.compare(
                    bufferFinder.apply(aRef).getShort(offsetFinder.applyAsInt(aRef) + FIELD_STORE_ID),
                    bufferFinder.apply(bRef).getShort(offsetFinder.applyAsInt(bRef) + FIELD_STORE_ID)
                );
                case "inventory_id" : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_INVENTORY_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_INVENTORY_ID)
                );
                case "film_id"      : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_FILM_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_FILM_ID)
                );
                case "last_update"  : return (aRef, bRef) -> Long.compare(
                    bufferFinder.apply(aRef).getLong(offsetFinder.applyAsInt(aRef) + FIELD_LAST_UPDATE),
                    bufferFinder.apply(bRef).getLong(offsetFinder.applyAsInt(bRef) + FIELD_LAST_UPDATE)
                );
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public BiLongToIntFunction comparatorNullsLast(final ColumnIdentifier<Inventory> colId) {
        if (colId instanceof Inventory.Identifier) {
            final Inventory.Identifier _id = (Inventory.Identifier) colId;
            switch (_id) {
                case STORE_ID     : return (aRef, bRef) -> Short.compare(
                    bufferFinder.apply(aRef).getShort(offsetFinder.applyAsInt(aRef) + FIELD_STORE_ID),
                    bufferFinder.apply(bRef).getShort(offsetFinder.applyAsInt(bRef) + FIELD_STORE_ID)
                );
                case INVENTORY_ID : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_INVENTORY_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_INVENTORY_ID)
                );
                case FILM_ID      : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_FILM_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_FILM_ID)
                );
                case LAST_UPDATE  : return (aRef, bRef) -> Long.compare(
                    bufferFinder.apply(aRef).getLong(offsetFinder.applyAsInt(aRef) + FIELD_LAST_UPDATE),
                    bufferFinder.apply(bRef).getLong(offsetFinder.applyAsInt(bRef) + FIELD_LAST_UPDATE)
                );
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "store_id"     : return (aRef, bRef) -> Short.compare(
                    bufferFinder.apply(aRef).getShort(offsetFinder.applyAsInt(aRef) + FIELD_STORE_ID),
                    bufferFinder.apply(bRef).getShort(offsetFinder.applyAsInt(bRef) + FIELD_STORE_ID)
                );
                case "inventory_id" : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_INVENTORY_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_INVENTORY_ID)
                );
                case "film_id"      : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_FILM_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_FILM_ID)
                );
                case "last_update"  : return (aRef, bRef) -> Long.compare(
                    bufferFinder.apply(aRef).getLong(offsetFinder.applyAsInt(aRef) + FIELD_LAST_UPDATE),
                    bufferFinder.apply(bRef).getLong(offsetFinder.applyAsInt(bRef) + FIELD_LAST_UPDATE)
                );
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction compareToByte(final ColumnIdentifier<Inventory> colId, final byte value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type byte.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToShort(final ColumnIdentifier<Inventory> colId, final short value) {
        if ("store_id".equals(colId.getColumnId())) {
            {
                final short operand = value;
                return ref -> Short.compare(
                    bufferFinder.apply(ref).getShort(offsetFinder.applyAsInt(ref) + FIELD_STORE_ID),
                    operand
                );
            }
        }
        
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type short.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToInt(final ColumnIdentifier<Inventory> colId, final int value) {
        if (colId instanceof Inventory.Identifier) {
            final Inventory.Identifier _id = (Inventory.Identifier) colId;
            switch (_id) {
                case INVENTORY_ID : {
                    final int operand = value;
                    return ref -> Integer.compare(
                        bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_INVENTORY_ID),
                        operand
                    );
                }
                case FILM_ID      : {
                    final int operand = value;
                    return ref -> Integer.compare(
                        bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_FILM_ID),
                        operand
                    );
                }
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type int.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "inventory_id" : {
                    final int operand = value;
                    return ref -> Integer.compare(
                        bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_INVENTORY_ID),
                        operand
                    );
                }
                case "film_id"      : {
                    final int operand = value;
                    return ref -> Integer.compare(
                        bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_FILM_ID),
                        operand
                    );
                }
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type int.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction compareToLong(final ColumnIdentifier<Inventory> colId, final long value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type long.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToFloat(final ColumnIdentifier<Inventory> colId, final float value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type float.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToDouble(final ColumnIdentifier<Inventory> colId, final double value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type double.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToBoolean(final ColumnIdentifier<Inventory> colId, final boolean value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type boolean.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToChar(final ColumnIdentifier<Inventory> colId, final char value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type char.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToObject(final ColumnIdentifier<Inventory> colId, final Object value) {
        if ("last_update".equals(colId.getColumnId())) {
            {
                final long operand = ((Timestamp) value).getTime();
                return ref -> Long.compare(
                    bufferFinder.apply(ref).getLong(offsetFinder.applyAsInt(ref) + FIELD_LAST_UPDATE),
                    operand
                );
            }
        }
        
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type object.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToNull(final ColumnIdentifier<Inventory> colId) {
        if (colId instanceof Inventory.Identifier) {
            final Inventory.Identifier _id = (Inventory.Identifier) colId;
            switch (_id) {
                case STORE_ID     : 
                case INVENTORY_ID : 
                case FILM_ID      : 
                case LAST_UPDATE  : return ALWAYS_LESS;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "store_id"     : 
                case "inventory_id" : 
                case "film_id"      : 
                case "last_update"  : return ALWAYS_LESS;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongPredicate newPredicate(final ColumnIdentifier<Inventory> colId, final EntityStorePredicate predicate) {
        if (colId instanceof Inventory.Identifier) {
            final Inventory.Identifier _id = (Inventory.Identifier) colId;
            switch (_id) {
                case STORE_ID     : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_STORE_ID;
                    return predicate.test(buffer, begins, begins + Short.BYTES);
                };
                case INVENTORY_ID : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_INVENTORY_ID;
                    return predicate.test(buffer, begins, begins + Integer.BYTES);
                };
                case FILM_ID      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_FILM_ID;
                    return predicate.test(buffer, begins, begins + Integer.BYTES);
                };
                case LAST_UPDATE  : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_LAST_UPDATE;
                    return predicate.test(buffer, begins, begins + 8);
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "store_id"     : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_STORE_ID;
                    return predicate.test(buffer, begins, begins + Short.BYTES);
                };
                case "inventory_id" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_INVENTORY_ID;
                    return predicate.test(buffer, begins, begins + Integer.BYTES);
                };
                case "film_id"      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_FILM_ID;
                    return predicate.test(buffer, begins, begins + Integer.BYTES);
                };
                case "last_update"  : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_LAST_UPDATE;
                    return predicate.test(buffer, begins, begins + 8);
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction newCompareTo(final ColumnIdentifier<Inventory> colId, final EntityStoreCompareTo compareTo) {
        if (colId instanceof Inventory.Identifier) {
            final Inventory.Identifier _id = (Inventory.Identifier) colId;
            switch (_id) {
                case STORE_ID     : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_STORE_ID;
                    return compareTo.compare(buffer, begins, begins + Short.BYTES);
                };
                case INVENTORY_ID : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_INVENTORY_ID;
                    return compareTo.compare(buffer, begins, begins + Integer.BYTES);
                };
                case FILM_ID      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_FILM_ID;
                    return compareTo.compare(buffer, begins, begins + Integer.BYTES);
                };
                case LAST_UPDATE  : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_LAST_UPDATE;
                    return compareTo.compare(buffer, begins, begins + 8);
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "store_id"     : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_STORE_ID;
                    return compareTo.compare(buffer, begins, begins + Short.BYTES);
                };
                case "inventory_id" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_INVENTORY_ID;
                    return compareTo.compare(buffer, begins, begins + Integer.BYTES);
                };
                case "film_id"      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_FILM_ID;
                    return compareTo.compare(buffer, begins, begins + Integer.BYTES);
                };
                case "last_update"  : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_LAST_UPDATE;
                    return compareTo.compare(buffer, begins, begins + 8);
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public BiLongToIntFunction newComparator(final ColumnIdentifier<Inventory> colId, final EntityStoreComparator comparator) {
        if (colId instanceof Inventory.Identifier) {
            final Inventory.Identifier _id = (Inventory.Identifier) colId;
            switch (_id) {
                case STORE_ID     : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_STORE_ID;
                    final int bBegins = bRowOffset + FIELD_STORE_ID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Short.BYTES,
                        bBuffer, bBegins, bBegins + Short.BYTES
                    );
                };
                case INVENTORY_ID : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_INVENTORY_ID;
                    final int bBegins = bRowOffset + FIELD_INVENTORY_ID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Integer.BYTES,
                        bBuffer, bBegins, bBegins + Integer.BYTES
                    );
                };
                case FILM_ID      : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_FILM_ID;
                    final int bBegins = bRowOffset + FIELD_FILM_ID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Integer.BYTES,
                        bBuffer, bBegins, bBegins + Integer.BYTES
                    );
                };
                case LAST_UPDATE  : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_LAST_UPDATE;
                    final int bBegins = bRowOffset + FIELD_LAST_UPDATE;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + 8,
                        bBuffer, bBegins, bBegins + 8
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "store_id"     : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_STORE_ID;
                    final int bBegins = bRowOffset + FIELD_STORE_ID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Short.BYTES,
                        bBuffer, bBegins, bBegins + Short.BYTES
                    );
                };
                case "inventory_id" : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_INVENTORY_ID;
                    final int bBegins = bRowOffset + FIELD_INVENTORY_ID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Integer.BYTES,
                        bBuffer, bBegins, bBegins + Integer.BYTES
                    );
                };
                case "film_id"      : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_FILM_ID;
                    final int bBegins = bRowOffset + FIELD_FILM_ID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Integer.BYTES,
                        bBuffer, bBegins, bBegins + Integer.BYTES
                    );
                };
                case "last_update"  : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_LAST_UPDATE;
                    final int bBegins = bRowOffset + FIELD_LAST_UPDATE;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + 8,
                        bBuffer, bBegins, bBegins + 8
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction sizeOf() {
        return ref -> VARSIZE_BEGINS;
    }
}