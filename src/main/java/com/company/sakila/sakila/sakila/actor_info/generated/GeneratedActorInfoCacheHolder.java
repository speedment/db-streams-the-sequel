package com.company.sakila.sakila.sakila.actor_info.generated;

import com.company.sakila.sakila.sakila.actor_info.ActorInfo;
import com.company.sakila.sakila.sakila.actor_info.ActorInfoEntityStoreSerializerImpl;
import com.company.sakila.sakila.sakila.actor_info.ActorInfoManager;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.tuple.Tuple2;
import com.speedment.common.tuple.Tuples;
import com.speedment.enterprise.datastore.runtime.HasStatistics.Statistics;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStore;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreHolder;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfInt;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfString;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.datastore.runtime.fieldcache.MultiFieldCache;
import com.speedment.enterprise.datastore.runtime.internal.util.StatisticsInternalUtil;
import com.speedment.enterprise.datastore.runtime.util.DataStoreHolderUtil;
import com.speedment.runtime.bulk.PersistOperation;
import com.speedment.runtime.bulk.RemoveOperation;
import com.speedment.runtime.bulk.UpdateOperation;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.ColumnLabel;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.StreamSupplierComponent;
import com.speedment.runtime.field.Field;
import com.speedment.runtime.field.trait.HasIdentifier;

import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.stream.Stream;

import static java.util.Objects.requireNonNull;
import static java.util.stream.Collectors.toMap;
import static java.util.stream.Collectors.toSet;

/**
 * A holder class for the various caches that are used to speed up the {@link
 * ActorInfoManager}.
 * 
 * Generated by
 * com.speedment.enterprise.datastore.generator.internal.code.GeneratedEntityCacheHolderTranslator
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public final class GeneratedActorInfoCacheHolder implements EntityStoreHolder<ActorInfo> {
    
    private final EntityStore<ActorInfo> entityStore;
    private final OfInt fieldActorIdCache;
    private final OfString fieldFirstNameCache;
    private final OfString fieldLastNameCache;
    private final OfString fieldFilmInfoCache;
    
    public GeneratedActorInfoCacheHolder(
            EntityStore<ActorInfo> entityStore,
            OfInt fieldActorIdCache,
            OfString fieldFirstNameCache,
            OfString fieldLastNameCache,
            OfString fieldFilmInfoCache) {
        
        this.entityStore         = requireNonNull(entityStore);
        this.fieldActorIdCache   = requireNonNull(fieldActorIdCache);
        this.fieldFirstNameCache = requireNonNull(fieldFirstNameCache);
        this.fieldLastNameCache  = requireNonNull(fieldLastNameCache);
        this.fieldFilmInfoCache  = requireNonNull(fieldFilmInfoCache);
    }
    
    @Override
    public EntityStore<ActorInfo> getEntityStore() {
        return entityStore;
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <CACHE extends FieldCache<CACHE>> CACHE getFieldCache(ColumnIdentifier<ActorInfo> columnId) {
        if (columnId instanceof ActorInfo.Identifier) {
            final ActorInfo.Identifier _id = (ActorInfo.Identifier) columnId;
            switch (_id) {
                case ACTOR_ID   : return (CACHE) fieldActorIdCache;
                case FIRST_NAME : return (CACHE) fieldFirstNameCache;
                case LAST_NAME  : return (CACHE) fieldLastNameCache;
                case FILM_INFO  : return (CACHE) fieldFilmInfoCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = columnId.getColumnId();
            switch (_colName) {
                case "actor_id"   : return (CACHE) fieldActorIdCache;
                case "first_name" : return (CACHE) fieldFirstNameCache;
                case "last_name"  : return (CACHE) fieldLastNameCache;
                case "film_info"  : return (CACHE) fieldFilmInfoCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public boolean isHavingMultiFieldCache(ColumnIdentifier<ActorInfo> columnId) {
        return false;
    }
    
    public static CompletableFuture<GeneratedActorInfoCacheHolder> reload(StreamSupplierComponent streamSupplier, ExecutorService executor) {
        return reload(DataStoreHolderUtil.buildEntityStore(
            streamSupplier,
            executor,
            ActorInfoEntityStoreSerializerImpl::new,
            TableIdentifier.of("sakila", "sakila", "actor_info")
        ), executor);
    }
    
    @Override
    public EntityStoreHolder<ActorInfo> recycleAndPersist(PersistOperation<ActorInfo> persistOperation) {
        return wrapped().recycleAndPersist(persistOperation);
    }
    
    @Override
    public EntityStoreHolder<ActorInfo> recycleAndRemove(RemoveOperation<ActorInfo> removeOperation) {
        return wrapped().recycleAndRemove(removeOperation);
    }
    
    @Override
    public EntityStoreHolder<ActorInfo> recycleAndUpdate(UpdateOperation<ActorInfo> updateOperation) {
        return wrapped().recycleAndUpdate(updateOperation);
    }
    
    private EntityStoreHolder<ActorInfo> wrapped() {
        // Use explicit type for Stream to improve compilation time.
        final Map<ColumnLabel, FieldCache<?>> fieldCaches = Stream.<Tuple2<HasIdentifier<ActorInfo>, FieldCache<?>>>of(
            Tuples.of(ActorInfo.ACTOR_ID,  fieldActorIdCache),
            Tuples.of(ActorInfo.FIRST_NAME,fieldFirstNameCache),
            Tuples.of(ActorInfo.LAST_NAME, fieldLastNameCache),
            Tuples.of(ActorInfo.FILM_INFO, fieldFilmInfoCache)
        )
            .collect(toMap(t2 -> t2.get0().identifier().label(), Tuple2::get1));
        final Map<ColumnLabel,  Map<ColumnLabel, MultiFieldCache<?, ?, ?>>>  multiFieldCaches = createMultiCacheMap();
        final Set<ColumnIdentifier<ActorInfo>> columnIdentifiers = Stream.<HasIdentifier<ActorInfo>>of(
            ActorInfo.ACTOR_ID,
            ActorInfo.FIRST_NAME,
            ActorInfo.LAST_NAME,
            ActorInfo.FILM_INFO
        )
            .map(HasIdentifier::identifier)
            .collect(toSet());
        return EntityStoreHolder.of(
            entityStore,
            fieldCaches,
            multiFieldCaches,
            columnIdentifiers
        );
    }
    
    public static CompletableFuture<GeneratedActorInfoCacheHolder> reload(CompletableFuture<EntityStore<ActorInfo>> entityStoreFuture, ExecutorService executor) {
        final CompletableFuture<FieldCache.OfInt> fieldActorIdCacheFuture =
            DataStoreHolderUtil.buildIntCache(entityStoreFuture, executor, ActorInfo.ACTOR_ID, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldFirstNameCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, ActorInfo.FIRST_NAME, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldLastNameCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, ActorInfo.LAST_NAME, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldFilmInfoCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, ActorInfo.FILM_INFO, 0);
        
        return entityStoreFuture.thenApplyAsync(entityStore -> {
            try {
                return new GeneratedActorInfoCacheHolder(
                    entityStore,
                    fieldActorIdCacheFuture.get(),
                    fieldFirstNameCacheFuture.get(),
                    fieldLastNameCacheFuture.get(),
                    fieldFilmInfoCacheFuture.get()
                );
            } catch (final ExecutionException | InterruptedException ex) {
                throw new RuntimeException(ex);
            }
        });
    }
    
    @Override
    public void close() {
        entityStore.close();
        fieldActorIdCache.close();
        fieldFirstNameCache.close();
        fieldLastNameCache.close();
        fieldFilmInfoCache.close();
    }
    
    @Override
    public Map<String, Map<Statistics, ?>> getStatistics() {
        return StatisticsInternalUtil.getStatistics(    
            this,
            entityStore.identifier(),
            ActorInfo.Identifier.ACTOR_ID,
            ActorInfo.Identifier.FIRST_NAME,
            ActorInfo.Identifier.LAST_NAME,
            ActorInfo.Identifier.FILM_INFO
        );
    }
    
    private Map<ColumnLabel, Map<ColumnLabel, MultiFieldCache<?, ?, ?>>> createMultiCacheMap() {
        return Collections.emptyMap();
    }
}