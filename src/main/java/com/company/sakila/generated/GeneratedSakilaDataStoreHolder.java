package com.company.sakila.generated;

import com.company.sakila.sakila.sakila.actor.Actor;
import com.company.sakila.sakila.sakila.actor.generated.GeneratedActorCacheHolder;
import com.company.sakila.sakila.sakila.actor_info.ActorInfo;
import com.company.sakila.sakila.sakila.actor_info.generated.GeneratedActorInfoCacheHolder;
import com.company.sakila.sakila.sakila.address.Address;
import com.company.sakila.sakila.sakila.address.generated.GeneratedAddressCacheHolder;
import com.company.sakila.sakila.sakila.category.Category;
import com.company.sakila.sakila.sakila.category.generated.GeneratedCategoryCacheHolder;
import com.company.sakila.sakila.sakila.city.City;
import com.company.sakila.sakila.sakila.city.generated.GeneratedCityCacheHolder;
import com.company.sakila.sakila.sakila.country.Country;
import com.company.sakila.sakila.sakila.country.generated.GeneratedCountryCacheHolder;
import com.company.sakila.sakila.sakila.customer.Customer;
import com.company.sakila.sakila.sakila.customer.generated.GeneratedCustomerCacheHolder;
import com.company.sakila.sakila.sakila.customer_list.CustomerList;
import com.company.sakila.sakila.sakila.customer_list.generated.GeneratedCustomerListCacheHolder;
import com.company.sakila.sakila.sakila.film.Film;
import com.company.sakila.sakila.sakila.film.generated.GeneratedFilmCacheHolder;
import com.company.sakila.sakila.sakila.film_actor.FilmActor;
import com.company.sakila.sakila.sakila.film_actor.generated.GeneratedFilmActorCacheHolder;
import com.company.sakila.sakila.sakila.film_category.FilmCategory;
import com.company.sakila.sakila.sakila.film_category.generated.GeneratedFilmCategoryCacheHolder;
import com.company.sakila.sakila.sakila.film_list.FilmList;
import com.company.sakila.sakila.sakila.film_list.generated.GeneratedFilmListCacheHolder;
import com.company.sakila.sakila.sakila.film_text.FilmText;
import com.company.sakila.sakila.sakila.film_text.generated.GeneratedFilmTextCacheHolder;
import com.company.sakila.sakila.sakila.inventory.Inventory;
import com.company.sakila.sakila.sakila.inventory.generated.GeneratedInventoryCacheHolder;
import com.company.sakila.sakila.sakila.language.Language;
import com.company.sakila.sakila.sakila.language.generated.GeneratedLanguageCacheHolder;
import com.company.sakila.sakila.sakila.nicer_but_slower_film_list.NicerButSlowerFilmList;
import com.company.sakila.sakila.sakila.nicer_but_slower_film_list.generated.GeneratedNicerButSlowerFilmListCacheHolder;
import com.company.sakila.sakila.sakila.payment.Payment;
import com.company.sakila.sakila.sakila.payment.generated.GeneratedPaymentCacheHolder;
import com.company.sakila.sakila.sakila.rental.Rental;
import com.company.sakila.sakila.sakila.rental.generated.GeneratedRentalCacheHolder;
import com.company.sakila.sakila.sakila.sales_by_film_category.SalesByFilmCategory;
import com.company.sakila.sakila.sakila.sales_by_film_category.generated.GeneratedSalesByFilmCategoryCacheHolder;
import com.company.sakila.sakila.sakila.sales_by_store.SalesByStore;
import com.company.sakila.sakila.sakila.sales_by_store.generated.GeneratedSalesByStoreCacheHolder;
import com.company.sakila.sakila.sakila.staff.Staff;
import com.company.sakila.sakila.sakila.staff.generated.GeneratedStaffCacheHolder;
import com.company.sakila.sakila.sakila.staff_list.StaffList;
import com.company.sakila.sakila.sakila.staff_list.generated.GeneratedStaffListCacheHolder;
import com.company.sakila.sakila.sakila.store.Store;
import com.company.sakila.sakila.sakila.store.generated.GeneratedStoreCacheHolder;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.DataStoreHolder;
import com.speedment.enterprise.datastore.runtime.HasStatistics.Statistics;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStore;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreHolder;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.datastore.runtime.fieldcache.MultiFieldCache;
import com.speedment.enterprise.datastore.runtime.internal.util.StatisticsInternalUtil;
import com.speedment.runtime.config.identifier.ColumnIdentifier;

import java.util.Map;
import java.util.Optional;
import java.util.stream.Stream;

import static java.util.Objects.requireNonNull;

/**
 * A holder class for the various caches that are used to speed up the project.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public final class GeneratedSakilaDataStoreHolder implements DataStoreHolder {
    
    private final GeneratedActorCacheHolder actorHolder;
    private final GeneratedAddressCacheHolder addressHolder;
    private final GeneratedCategoryCacheHolder categoryHolder;
    private final GeneratedCityCacheHolder cityHolder;
    private final GeneratedCountryCacheHolder countryHolder;
    private final GeneratedCustomerCacheHolder customerHolder;
    private final GeneratedFilmCacheHolder filmHolder;
    private final GeneratedFilmActorCacheHolder filmActorHolder;
    private final GeneratedFilmCategoryCacheHolder filmCategoryHolder;
    private final GeneratedFilmTextCacheHolder filmTextHolder;
    private final GeneratedInventoryCacheHolder inventoryHolder;
    private final GeneratedLanguageCacheHolder languageHolder;
    private final GeneratedPaymentCacheHolder paymentHolder;
    private final GeneratedRentalCacheHolder rentalHolder;
    private final GeneratedStaffCacheHolder staffHolder;
    private final GeneratedStoreCacheHolder storeHolder;
    private final GeneratedActorInfoCacheHolder actorInfoHolder;
    private final GeneratedCustomerListCacheHolder customerListHolder;
    private final GeneratedFilmListCacheHolder filmListHolder;
    private final GeneratedNicerButSlowerFilmListCacheHolder nicerButSlowerFilmListHolder;
    private final GeneratedSalesByFilmCategoryCacheHolder salesByFilmCategoryHolder;
    private final GeneratedSalesByStoreCacheHolder salesByStoreHolder;
    private final GeneratedStaffListCacheHolder staffListHolder;
    
    public GeneratedSakilaDataStoreHolder(
            GeneratedActorCacheHolder actorHolder,
            GeneratedAddressCacheHolder addressHolder,
            GeneratedCategoryCacheHolder categoryHolder,
            GeneratedCityCacheHolder cityHolder,
            GeneratedCountryCacheHolder countryHolder,
            GeneratedCustomerCacheHolder customerHolder,
            GeneratedFilmCacheHolder filmHolder,
            GeneratedFilmActorCacheHolder filmActorHolder,
            GeneratedFilmCategoryCacheHolder filmCategoryHolder,
            GeneratedFilmTextCacheHolder filmTextHolder,
            GeneratedInventoryCacheHolder inventoryHolder,
            GeneratedLanguageCacheHolder languageHolder,
            GeneratedPaymentCacheHolder paymentHolder,
            GeneratedRentalCacheHolder rentalHolder,
            GeneratedStaffCacheHolder staffHolder,
            GeneratedStoreCacheHolder storeHolder,
            GeneratedActorInfoCacheHolder actorInfoHolder,
            GeneratedCustomerListCacheHolder customerListHolder,
            GeneratedFilmListCacheHolder filmListHolder,
            GeneratedNicerButSlowerFilmListCacheHolder nicerButSlowerFilmListHolder,
            GeneratedSalesByFilmCategoryCacheHolder salesByFilmCategoryHolder,
            GeneratedSalesByStoreCacheHolder salesByStoreHolder,
            GeneratedStaffListCacheHolder staffListHolder) {
        this.actorHolder                  = requireNonNull(actorHolder);
        this.addressHolder                = requireNonNull(addressHolder);
        this.categoryHolder               = requireNonNull(categoryHolder);
        this.cityHolder                   = requireNonNull(cityHolder);
        this.countryHolder                = requireNonNull(countryHolder);
        this.customerHolder               = requireNonNull(customerHolder);
        this.filmHolder                   = requireNonNull(filmHolder);
        this.filmActorHolder              = requireNonNull(filmActorHolder);
        this.filmCategoryHolder           = requireNonNull(filmCategoryHolder);
        this.filmTextHolder               = requireNonNull(filmTextHolder);
        this.inventoryHolder              = requireNonNull(inventoryHolder);
        this.languageHolder               = requireNonNull(languageHolder);
        this.paymentHolder                = requireNonNull(paymentHolder);
        this.rentalHolder                 = requireNonNull(rentalHolder);
        this.staffHolder                  = requireNonNull(staffHolder);
        this.storeHolder                  = requireNonNull(storeHolder);
        this.actorInfoHolder              = requireNonNull(actorInfoHolder);
        this.customerListHolder           = requireNonNull(customerListHolder);
        this.filmListHolder               = requireNonNull(filmListHolder);
        this.nicerButSlowerFilmListHolder = requireNonNull(nicerButSlowerFilmListHolder);
        this.salesByFilmCategoryHolder    = requireNonNull(salesByFilmCategoryHolder);
        this.salesByStoreHolder           = requireNonNull(salesByStoreHolder);
        this.staffListHolder              = requireNonNull(staffListHolder);
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <ENTITY> EntityStore<ENTITY> getEntityStore(
            String dbmsName,
            String schemaName,
            String tableName) {
        switch (tableName) {
            case "actor"                      : return (EntityStore<ENTITY>) actorHolder.getEntityStore();
            case "address"                    : return (EntityStore<ENTITY>) addressHolder.getEntityStore();
            case "category"                   : return (EntityStore<ENTITY>) categoryHolder.getEntityStore();
            case "city"                       : return (EntityStore<ENTITY>) cityHolder.getEntityStore();
            case "country"                    : return (EntityStore<ENTITY>) countryHolder.getEntityStore();
            case "customer"                   : return (EntityStore<ENTITY>) customerHolder.getEntityStore();
            case "film"                       : return (EntityStore<ENTITY>) filmHolder.getEntityStore();
            case "film_actor"                 : return (EntityStore<ENTITY>) filmActorHolder.getEntityStore();
            case "film_category"              : return (EntityStore<ENTITY>) filmCategoryHolder.getEntityStore();
            case "film_text"                  : return (EntityStore<ENTITY>) filmTextHolder.getEntityStore();
            case "inventory"                  : return (EntityStore<ENTITY>) inventoryHolder.getEntityStore();
            case "language"                   : return (EntityStore<ENTITY>) languageHolder.getEntityStore();
            case "payment"                    : return (EntityStore<ENTITY>) paymentHolder.getEntityStore();
            case "rental"                     : return (EntityStore<ENTITY>) rentalHolder.getEntityStore();
            case "staff"                      : return (EntityStore<ENTITY>) staffHolder.getEntityStore();
            case "store"                      : return (EntityStore<ENTITY>) storeHolder.getEntityStore();
            case "actor_info"                 : return (EntityStore<ENTITY>) actorInfoHolder.getEntityStore();
            case "customer_list"              : return (EntityStore<ENTITY>) customerListHolder.getEntityStore();
            case "film_list"                  : return (EntityStore<ENTITY>) filmListHolder.getEntityStore();
            case "nicer_but_slower_film_list" : return (EntityStore<ENTITY>) nicerButSlowerFilmListHolder.getEntityStore();
            case "sales_by_film_category"     : return (EntityStore<ENTITY>) salesByFilmCategoryHolder.getEntityStore();
            case "sales_by_store"             : return (EntityStore<ENTITY>) salesByStoreHolder.getEntityStore();
            case "staff_list"                 : return (EntityStore<ENTITY>) staffListHolder.getEntityStore();
            default : throw new UnsupportedOperationException(
                String.format("Could not find '%s' in database model.", tableName)
            );
        }
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <ENTITY, CACHE extends FieldCache<CACHE>> CACHE getFieldCache(ColumnIdentifier<ENTITY> columnId) {
        switch (columnId.getTableId()) {
            case "actor"                      : return (CACHE) actorHolder.getFieldCache((ColumnIdentifier<Actor>) columnId);
            case "address"                    : return (CACHE) addressHolder.getFieldCache((ColumnIdentifier<Address>) columnId);
            case "category"                   : return (CACHE) categoryHolder.getFieldCache((ColumnIdentifier<Category>) columnId);
            case "city"                       : return (CACHE) cityHolder.getFieldCache((ColumnIdentifier<City>) columnId);
            case "country"                    : return (CACHE) countryHolder.getFieldCache((ColumnIdentifier<Country>) columnId);
            case "customer"                   : return (CACHE) customerHolder.getFieldCache((ColumnIdentifier<Customer>) columnId);
            case "film"                       : return (CACHE) filmHolder.getFieldCache((ColumnIdentifier<Film>) columnId);
            case "film_actor"                 : return (CACHE) filmActorHolder.getFieldCache((ColumnIdentifier<FilmActor>) columnId);
            case "film_category"              : return (CACHE) filmCategoryHolder.getFieldCache((ColumnIdentifier<FilmCategory>) columnId);
            case "film_text"                  : return (CACHE) filmTextHolder.getFieldCache((ColumnIdentifier<FilmText>) columnId);
            case "inventory"                  : return (CACHE) inventoryHolder.getFieldCache((ColumnIdentifier<Inventory>) columnId);
            case "language"                   : return (CACHE) languageHolder.getFieldCache((ColumnIdentifier<Language>) columnId);
            case "payment"                    : return (CACHE) paymentHolder.getFieldCache((ColumnIdentifier<Payment>) columnId);
            case "rental"                     : return (CACHE) rentalHolder.getFieldCache((ColumnIdentifier<Rental>) columnId);
            case "staff"                      : return (CACHE) staffHolder.getFieldCache((ColumnIdentifier<Staff>) columnId);
            case "store"                      : return (CACHE) storeHolder.getFieldCache((ColumnIdentifier<Store>) columnId);
            case "actor_info"                 : return (CACHE) actorInfoHolder.getFieldCache((ColumnIdentifier<ActorInfo>) columnId);
            case "customer_list"              : return (CACHE) customerListHolder.getFieldCache((ColumnIdentifier<CustomerList>) columnId);
            case "film_list"                  : return (CACHE) filmListHolder.getFieldCache((ColumnIdentifier<FilmList>) columnId);
            case "nicer_but_slower_film_list" : return (CACHE) nicerButSlowerFilmListHolder.getFieldCache((ColumnIdentifier<NicerButSlowerFilmList>) columnId);
            case "sales_by_film_category"     : return (CACHE) salesByFilmCategoryHolder.getFieldCache((ColumnIdentifier<SalesByFilmCategory>) columnId);
            case "sales_by_store"             : return (CACHE) salesByStoreHolder.getFieldCache((ColumnIdentifier<SalesByStore>) columnId);
            case "staff_list"                 : return (CACHE) staffListHolder.getFieldCache((ColumnIdentifier<StaffList>) columnId);
            default : throw new UnsupportedOperationException(
                String.format("Could not find '%s' in database model.", columnId.getTableId())
            );
        }
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <ENTITY, T0, T1, CACHE extends MultiFieldCache<T0, T1, CACHE>> Optional<CACHE> getMultiFieldCache(ColumnIdentifier<ENTITY> firstColumnId, ColumnIdentifier<ENTITY> secondColumnId) {
        return Optional.empty(); // No multi-indexes are used in the project
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <ENTITY> boolean isHavingMultiFieldCache(ColumnIdentifier<ENTITY> columnId) {
        return false; // No multi-indexes are used in the project
    }
    
    @Override
    public void close() {
        holders().forEach(EntityStoreHolder::close);
    }
    
    @Override
    public Map<String, Map<Statistics, ?>> getStatistics() {
        return StatisticsInternalUtil.create(
            holders()
                .toArray(EntityStoreHolder[]::new)
        );
    }
    
    @Override
    public Stream<EntityStoreHolder<?>> holders() {
        return Stream.of(
            actorHolder,
            addressHolder,
            categoryHolder,
            cityHolder,
            countryHolder,
            customerHolder,
            filmHolder,
            filmActorHolder,
            filmCategoryHolder,
            filmTextHolder,
            inventoryHolder,
            languageHolder,
            paymentHolder,
            rentalHolder,
            staffHolder,
            storeHolder,
            actorInfoHolder,
            customerListHolder,
            filmListHolder,
            nicerButSlowerFilmListHolder,
            salesByFilmCategoryHolder,
            salesByStoreHolder,
            staffListHolder
        );
    }
}